<?php
/**
 * ListCustomDomainSchemaInnerSsl
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * ListCustomDomainSchemaInnerSsl Class Doc Comment
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListCustomDomainSchemaInnerSsl implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListCustomDomainSchema_inner_ssl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'method' => 'string',
        'status' => 'string',
        'txt_name' => 'string',
        'txt_value' => 'string',
        'validation_records' => '\Hookdeck\Model\ListCustomDomainSchemaInnerSslValidationRecordsInner[]',
        'dcv_delegation_records' => '\Hookdeck\Model\ListCustomDomainSchemaInnerSslDcvDelegationRecordsInner[]',
        'settings' => '\Hookdeck\Model\ListCustomDomainSchemaInnerSslSettings',
        'bundle_method' => 'string',
        'wildcard' => 'bool',
        'certificate_authority' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'method' => null,
        'status' => null,
        'txt_name' => null,
        'txt_value' => null,
        'validation_records' => null,
        'dcv_delegation_records' => null,
        'settings' => null,
        'bundle_method' => null,
        'wildcard' => null,
        'certificate_authority' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'method' => false,
        'status' => false,
        'txt_name' => false,
        'txt_value' => false,
        'validation_records' => false,
        'dcv_delegation_records' => false,
        'settings' => false,
        'bundle_method' => false,
        'wildcard' => false,
        'certificate_authority' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'method' => 'method',
        'status' => 'status',
        'txt_name' => 'txt_name',
        'txt_value' => 'txt_value',
        'validation_records' => 'validation_records',
        'dcv_delegation_records' => 'dcv_delegation_records',
        'settings' => 'settings',
        'bundle_method' => 'bundle_method',
        'wildcard' => 'wildcard',
        'certificate_authority' => 'certificate_authority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'method' => 'setMethod',
        'status' => 'setStatus',
        'txt_name' => 'setTxtName',
        'txt_value' => 'setTxtValue',
        'validation_records' => 'setValidationRecords',
        'dcv_delegation_records' => 'setDcvDelegationRecords',
        'settings' => 'setSettings',
        'bundle_method' => 'setBundleMethod',
        'wildcard' => 'setWildcard',
        'certificate_authority' => 'setCertificateAuthority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'method' => 'getMethod',
        'status' => 'getStatus',
        'txt_name' => 'getTxtName',
        'txt_value' => 'getTxtValue',
        'validation_records' => 'getValidationRecords',
        'dcv_delegation_records' => 'getDcvDelegationRecords',
        'settings' => 'getSettings',
        'bundle_method' => 'getBundleMethod',
        'wildcard' => 'getWildcard',
        'certificate_authority' => 'getCertificateAuthority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('txt_name', $data ?? [], null);
        $this->setIfExists('txt_value', $data ?? [], null);
        $this->setIfExists('validation_records', $data ?? [], null);
        $this->setIfExists('dcv_delegation_records', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('bundle_method', $data ?? [], null);
        $this->setIfExists('wildcard', $data ?? [], null);
        $this->setIfExists('certificate_authority', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets txt_name
     *
     * @return string|null
     */
    public function getTxtName()
    {
        return $this->container['txt_name'];
    }

    /**
     * Sets txt_name
     *
     * @param string|null $txt_name txt_name
     *
     * @return self
     */
    public function setTxtName($txt_name)
    {
        if (is_null($txt_name)) {
            throw new \InvalidArgumentException('non-nullable txt_name cannot be null');
        }
        $this->container['txt_name'] = $txt_name;

        return $this;
    }

    /**
     * Gets txt_value
     *
     * @return string|null
     */
    public function getTxtValue()
    {
        return $this->container['txt_value'];
    }

    /**
     * Sets txt_value
     *
     * @param string|null $txt_value txt_value
     *
     * @return self
     */
    public function setTxtValue($txt_value)
    {
        if (is_null($txt_value)) {
            throw new \InvalidArgumentException('non-nullable txt_value cannot be null');
        }
        $this->container['txt_value'] = $txt_value;

        return $this;
    }

    /**
     * Gets validation_records
     *
     * @return \Hookdeck\Model\ListCustomDomainSchemaInnerSslValidationRecordsInner[]|null
     */
    public function getValidationRecords()
    {
        return $this->container['validation_records'];
    }

    /**
     * Sets validation_records
     *
     * @param \Hookdeck\Model\ListCustomDomainSchemaInnerSslValidationRecordsInner[]|null $validation_records validation_records
     *
     * @return self
     */
    public function setValidationRecords($validation_records)
    {
        if (is_null($validation_records)) {
            throw new \InvalidArgumentException('non-nullable validation_records cannot be null');
        }
        $this->container['validation_records'] = $validation_records;

        return $this;
    }

    /**
     * Gets dcv_delegation_records
     *
     * @return \Hookdeck\Model\ListCustomDomainSchemaInnerSslDcvDelegationRecordsInner[]|null
     */
    public function getDcvDelegationRecords()
    {
        return $this->container['dcv_delegation_records'];
    }

    /**
     * Sets dcv_delegation_records
     *
     * @param \Hookdeck\Model\ListCustomDomainSchemaInnerSslDcvDelegationRecordsInner[]|null $dcv_delegation_records dcv_delegation_records
     *
     * @return self
     */
    public function setDcvDelegationRecords($dcv_delegation_records)
    {
        if (is_null($dcv_delegation_records)) {
            throw new \InvalidArgumentException('non-nullable dcv_delegation_records cannot be null');
        }
        $this->container['dcv_delegation_records'] = $dcv_delegation_records;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Hookdeck\Model\ListCustomDomainSchemaInnerSslSettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Hookdeck\Model\ListCustomDomainSchemaInnerSslSettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets bundle_method
     *
     * @return string|null
     */
    public function getBundleMethod()
    {
        return $this->container['bundle_method'];
    }

    /**
     * Sets bundle_method
     *
     * @param string|null $bundle_method bundle_method
     *
     * @return self
     */
    public function setBundleMethod($bundle_method)
    {
        if (is_null($bundle_method)) {
            throw new \InvalidArgumentException('non-nullable bundle_method cannot be null');
        }
        $this->container['bundle_method'] = $bundle_method;

        return $this;
    }

    /**
     * Gets wildcard
     *
     * @return bool|null
     */
    public function getWildcard()
    {
        return $this->container['wildcard'];
    }

    /**
     * Sets wildcard
     *
     * @param bool|null $wildcard wildcard
     *
     * @return self
     */
    public function setWildcard($wildcard)
    {
        if (is_null($wildcard)) {
            throw new \InvalidArgumentException('non-nullable wildcard cannot be null');
        }
        $this->container['wildcard'] = $wildcard;

        return $this;
    }

    /**
     * Gets certificate_authority
     *
     * @return string|null
     */
    public function getCertificateAuthority()
    {
        return $this->container['certificate_authority'];
    }

    /**
     * Sets certificate_authority
     *
     * @param string|null $certificate_authority certificate_authority
     *
     * @return self
     */
    public function setCertificateAuthority($certificate_authority)
    {
        if (is_null($certificate_authority)) {
            throw new \InvalidArgumentException('non-nullable certificate_authority cannot be null');
        }
        $this->container['certificate_authority'] = $certificate_authority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


