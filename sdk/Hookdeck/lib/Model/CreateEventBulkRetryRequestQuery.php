<?php
/**
 * CreateEventBulkRetryRequestQuery
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * CreateEventBulkRetryRequestQuery Class Doc Comment
 *
 * @category Class
 * @description Filter properties for the events to be included in the bulk retry
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateEventBulkRetryRequestQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createEventBulkRetry_request_query';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterId',
        'status' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterStatus',
        'webhook_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterWebhookId',
        'destination_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterDestinationId',
        'source_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterSourceId',
        'attempts' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterAttempts',
        'response_status' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterResponseStatus',
        'successful_at' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterSuccessfulAt',
        'created_at' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterCreatedAt',
        'error_code' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterErrorCode',
        'cli_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterCliId',
        'last_attempt_at' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterLastAttemptAt',
        'search_term' => 'string',
        'headers' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterHeaders',
        'body' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterBody',
        'parsed_query' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterParsedQuery',
        'path' => 'string',
        'cli_user_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterCliUserId',
        'issue_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId',
        'event_data_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId',
        'bulk_retry_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'webhook_id' => null,
        'destination_id' => null,
        'source_id' => null,
        'attempts' => null,
        'response_status' => null,
        'successful_at' => null,
        'created_at' => null,
        'error_code' => null,
        'cli_id' => null,
        'last_attempt_at' => null,
        'search_term' => null,
        'headers' => null,
        'body' => null,
        'parsed_query' => null,
        'path' => null,
        'cli_user_id' => null,
        'issue_id' => null,
        'event_data_id' => null,
        'bulk_retry_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'webhook_id' => false,
        'destination_id' => false,
        'source_id' => false,
        'attempts' => false,
        'response_status' => true,
        'successful_at' => true,
        'created_at' => false,
        'error_code' => false,
        'cli_id' => true,
        'last_attempt_at' => true,
        'search_term' => false,
        'headers' => false,
        'body' => false,
        'parsed_query' => false,
        'path' => false,
        'cli_user_id' => true,
        'issue_id' => false,
        'event_data_id' => false,
        'bulk_retry_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'webhook_id' => 'webhook_id',
        'destination_id' => 'destination_id',
        'source_id' => 'source_id',
        'attempts' => 'attempts',
        'response_status' => 'response_status',
        'successful_at' => 'successful_at',
        'created_at' => 'created_at',
        'error_code' => 'error_code',
        'cli_id' => 'cli_id',
        'last_attempt_at' => 'last_attempt_at',
        'search_term' => 'search_term',
        'headers' => 'headers',
        'body' => 'body',
        'parsed_query' => 'parsed_query',
        'path' => 'path',
        'cli_user_id' => 'cli_user_id',
        'issue_id' => 'issue_id',
        'event_data_id' => 'event_data_id',
        'bulk_retry_id' => 'bulk_retry_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'webhook_id' => 'setWebhookId',
        'destination_id' => 'setDestinationId',
        'source_id' => 'setSourceId',
        'attempts' => 'setAttempts',
        'response_status' => 'setResponseStatus',
        'successful_at' => 'setSuccessfulAt',
        'created_at' => 'setCreatedAt',
        'error_code' => 'setErrorCode',
        'cli_id' => 'setCliId',
        'last_attempt_at' => 'setLastAttemptAt',
        'search_term' => 'setSearchTerm',
        'headers' => 'setHeaders',
        'body' => 'setBody',
        'parsed_query' => 'setParsedQuery',
        'path' => 'setPath',
        'cli_user_id' => 'setCliUserId',
        'issue_id' => 'setIssueId',
        'event_data_id' => 'setEventDataId',
        'bulk_retry_id' => 'setBulkRetryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'webhook_id' => 'getWebhookId',
        'destination_id' => 'getDestinationId',
        'source_id' => 'getSourceId',
        'attempts' => 'getAttempts',
        'response_status' => 'getResponseStatus',
        'successful_at' => 'getSuccessfulAt',
        'created_at' => 'getCreatedAt',
        'error_code' => 'getErrorCode',
        'cli_id' => 'getCliId',
        'last_attempt_at' => 'getLastAttemptAt',
        'search_term' => 'getSearchTerm',
        'headers' => 'getHeaders',
        'body' => 'getBody',
        'parsed_query' => 'getParsedQuery',
        'path' => 'getPath',
        'cli_user_id' => 'getCliUserId',
        'issue_id' => 'getIssueId',
        'event_data_id' => 'getEventDataId',
        'bulk_retry_id' => 'getBulkRetryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('webhook_id', $data ?? [], null);
        $this->setIfExists('destination_id', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('attempts', $data ?? [], null);
        $this->setIfExists('response_status', $data ?? [], null);
        $this->setIfExists('successful_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('cli_id', $data ?? [], null);
        $this->setIfExists('last_attempt_at', $data ?? [], null);
        $this->setIfExists('search_term', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('parsed_query', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('cli_user_id', $data ?? [], null);
        $this->setIfExists('issue_id', $data ?? [], null);
        $this->setIfExists('event_data_id', $data ?? [], null);
        $this->setIfExists('bulk_retry_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['search_term']) && (mb_strlen($this->container['search_term']) < 3)) {
            $invalidProperties[] = "invalid value for 'search_term', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterId|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterId|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets webhook_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterWebhookId|null
     */
    public function getWebhookId()
    {
        return $this->container['webhook_id'];
    }

    /**
     * Sets webhook_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterWebhookId|null $webhook_id webhook_id
     *
     * @return self
     */
    public function setWebhookId($webhook_id)
    {
        if (is_null($webhook_id)) {
            throw new \InvalidArgumentException('non-nullable webhook_id cannot be null');
        }
        $this->container['webhook_id'] = $webhook_id;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterDestinationId|null
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterDestinationId|null $destination_id destination_id
     *
     * @return self
     */
    public function setDestinationId($destination_id)
    {
        if (is_null($destination_id)) {
            throw new \InvalidArgumentException('non-nullable destination_id cannot be null');
        }
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterSourceId|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterSourceId|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets attempts
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterAttempts|null
     */
    public function getAttempts()
    {
        return $this->container['attempts'];
    }

    /**
     * Sets attempts
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterAttempts|null $attempts attempts
     *
     * @return self
     */
    public function setAttempts($attempts)
    {
        if (is_null($attempts)) {
            throw new \InvalidArgumentException('non-nullable attempts cannot be null');
        }
        $this->container['attempts'] = $attempts;

        return $this;
    }

    /**
     * Gets response_status
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterResponseStatus|null
     */
    public function getResponseStatus()
    {
        return $this->container['response_status'];
    }

    /**
     * Sets response_status
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterResponseStatus|null $response_status response_status
     *
     * @return self
     */
    public function setResponseStatus($response_status)
    {
        if (is_null($response_status)) {
            array_push($this->openAPINullablesSetToNull, 'response_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response_status'] = $response_status;

        return $this;
    }

    /**
     * Gets successful_at
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterSuccessfulAt|null
     */
    public function getSuccessfulAt()
    {
        return $this->container['successful_at'];
    }

    /**
     * Sets successful_at
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterSuccessfulAt|null $successful_at successful_at
     *
     * @return self
     */
    public function setSuccessfulAt($successful_at)
    {
        if (is_null($successful_at)) {
            array_push($this->openAPINullablesSetToNull, 'successful_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('successful_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['successful_at'] = $successful_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterCreatedAt|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterCreatedAt|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterErrorCode|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterErrorCode|null $error_code error_code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets cli_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterCliId|null
     */
    public function getCliId()
    {
        return $this->container['cli_id'];
    }

    /**
     * Sets cli_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterCliId|null $cli_id cli_id
     *
     * @return self
     */
    public function setCliId($cli_id)
    {
        if (is_null($cli_id)) {
            array_push($this->openAPINullablesSetToNull, 'cli_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cli_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cli_id'] = $cli_id;

        return $this;
    }

    /**
     * Gets last_attempt_at
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterLastAttemptAt|null
     */
    public function getLastAttemptAt()
    {
        return $this->container['last_attempt_at'];
    }

    /**
     * Sets last_attempt_at
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterLastAttemptAt|null $last_attempt_at last_attempt_at
     *
     * @return self
     */
    public function setLastAttemptAt($last_attempt_at)
    {
        if (is_null($last_attempt_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_attempt_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_attempt_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_attempt_at'] = $last_attempt_at;

        return $this;
    }

    /**
     * Gets search_term
     *
     * @return string|null
     */
    public function getSearchTerm()
    {
        return $this->container['search_term'];
    }

    /**
     * Sets search_term
     *
     * @param string|null $search_term URL Encoded string of the value to match partially to the body, headers, parsed_query or path
     *
     * @return self
     */
    public function setSearchTerm($search_term)
    {
        if (is_null($search_term)) {
            throw new \InvalidArgumentException('non-nullable search_term cannot be null');
        }

        if ((mb_strlen($search_term) < 3)) {
            throw new \InvalidArgumentException('invalid length for $search_term when calling CreateEventBulkRetryRequestQuery., must be bigger than or equal to 3.');
        }

        $this->container['search_term'] = $search_term;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterHeaders|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterHeaders|null $headers headers
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        if (is_null($headers)) {
            throw new \InvalidArgumentException('non-nullable headers cannot be null');
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets body
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterBody|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterBody|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets parsed_query
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterParsedQuery|null
     */
    public function getParsedQuery()
    {
        return $this->container['parsed_query'];
    }

    /**
     * Sets parsed_query
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterParsedQuery|null $parsed_query parsed_query
     *
     * @return self
     */
    public function setParsedQuery($parsed_query)
    {
        if (is_null($parsed_query)) {
            throw new \InvalidArgumentException('non-nullable parsed_query cannot be null');
        }
        $this->container['parsed_query'] = $parsed_query;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path URL Encoded string of the value to match partially to the path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets cli_user_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterCliUserId|null
     */
    public function getCliUserId()
    {
        return $this->container['cli_user_id'];
    }

    /**
     * Sets cli_user_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterCliUserId|null $cli_user_id cli_user_id
     *
     * @return self
     */
    public function setCliUserId($cli_user_id)
    {
        if (is_null($cli_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'cli_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cli_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cli_user_id'] = $cli_user_id;

        return $this;
    }

    /**
     * Gets issue_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null
     */
    public function getIssueId()
    {
        return $this->container['issue_id'];
    }

    /**
     * Sets issue_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null $issue_id issue_id
     *
     * @return self
     */
    public function setIssueId($issue_id)
    {
        if (is_null($issue_id)) {
            throw new \InvalidArgumentException('non-nullable issue_id cannot be null');
        }
        $this->container['issue_id'] = $issue_id;

        return $this;
    }

    /**
     * Gets event_data_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null
     */
    public function getEventDataId()
    {
        return $this->container['event_data_id'];
    }

    /**
     * Sets event_data_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null $event_data_id event_data_id
     *
     * @return self
     */
    public function setEventDataId($event_data_id)
    {
        if (is_null($event_data_id)) {
            throw new \InvalidArgumentException('non-nullable event_data_id cannot be null');
        }
        $this->container['event_data_id'] = $event_data_id;

        return $this;
    }

    /**
     * Gets bulk_retry_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null
     */
    public function getBulkRetryId()
    {
        return $this->container['bulk_retry_id'];
    }

    /**
     * Sets bulk_retry_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null $bulk_retry_id bulk_retry_id
     *
     * @return self
     */
    public function setBulkRetryId($bulk_retry_id)
    {
        if (is_null($bulk_retry_id)) {
            throw new \InvalidArgumentException('non-nullable bulk_retry_id cannot be null');
        }
        $this->container['bulk_retry_id'] = $bulk_retry_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


