<?php
/**
 * TransformationIssue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * TransformationIssue Class Doc Comment
 *
 * @category Class
 * @description Transformation issue
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransformationIssue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransformationIssue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'team_id' => 'string',
        'status' => '\Hookdeck\Model\IssueStatus',
        'opened_at' => '\DateTime',
        'first_seen_at' => '\DateTime',
        'last_seen_at' => '\DateTime',
        'last_updated_by' => 'string',
        'dismissed_at' => '\DateTime',
        'auto_resolved_at' => '\DateTime',
        'merged_with' => 'string',
        'updated_at' => 'string',
        'created_at' => 'string',
        'type' => 'string',
        'aggregation_keys' => '\Hookdeck\Model\TransformationIssueAggregationKeys',
        'reference' => '\Hookdeck\Model\TransformationIssueReference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'team_id' => null,
        'status' => null,
        'opened_at' => 'date-time',
        'first_seen_at' => 'date-time',
        'last_seen_at' => 'date-time',
        'last_updated_by' => null,
        'dismissed_at' => 'date-time',
        'auto_resolved_at' => 'date-time',
        'merged_with' => null,
        'updated_at' => null,
        'created_at' => null,
        'type' => null,
        'aggregation_keys' => null,
        'reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'team_id' => false,
        'status' => false,
        'opened_at' => false,
        'first_seen_at' => false,
        'last_seen_at' => false,
        'last_updated_by' => true,
        'dismissed_at' => true,
        'auto_resolved_at' => true,
        'merged_with' => true,
        'updated_at' => false,
        'created_at' => false,
        'type' => false,
        'aggregation_keys' => false,
        'reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'team_id' => 'team_id',
        'status' => 'status',
        'opened_at' => 'opened_at',
        'first_seen_at' => 'first_seen_at',
        'last_seen_at' => 'last_seen_at',
        'last_updated_by' => 'last_updated_by',
        'dismissed_at' => 'dismissed_at',
        'auto_resolved_at' => 'auto_resolved_at',
        'merged_with' => 'merged_with',
        'updated_at' => 'updated_at',
        'created_at' => 'created_at',
        'type' => 'type',
        'aggregation_keys' => 'aggregation_keys',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'team_id' => 'setTeamId',
        'status' => 'setStatus',
        'opened_at' => 'setOpenedAt',
        'first_seen_at' => 'setFirstSeenAt',
        'last_seen_at' => 'setLastSeenAt',
        'last_updated_by' => 'setLastUpdatedBy',
        'dismissed_at' => 'setDismissedAt',
        'auto_resolved_at' => 'setAutoResolvedAt',
        'merged_with' => 'setMergedWith',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt',
        'type' => 'setType',
        'aggregation_keys' => 'setAggregationKeys',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'team_id' => 'getTeamId',
        'status' => 'getStatus',
        'opened_at' => 'getOpenedAt',
        'first_seen_at' => 'getFirstSeenAt',
        'last_seen_at' => 'getLastSeenAt',
        'last_updated_by' => 'getLastUpdatedBy',
        'dismissed_at' => 'getDismissedAt',
        'auto_resolved_at' => 'getAutoResolvedAt',
        'merged_with' => 'getMergedWith',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt',
        'type' => 'getType',
        'aggregation_keys' => 'getAggregationKeys',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_TRANSFORMATION = 'transformation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRANSFORMATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('opened_at', $data ?? [], null);
        $this->setIfExists('first_seen_at', $data ?? [], null);
        $this->setIfExists('last_seen_at', $data ?? [], null);
        $this->setIfExists('last_updated_by', $data ?? [], null);
        $this->setIfExists('dismissed_at', $data ?? [], null);
        $this->setIfExists('auto_resolved_at', $data ?? [], null);
        $this->setIfExists('merged_with', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('aggregation_keys', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['team_id'] === null) {
            $invalidProperties[] = "'team_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['opened_at'] === null) {
            $invalidProperties[] = "'opened_at' can't be null";
        }
        if ($this->container['first_seen_at'] === null) {
            $invalidProperties[] = "'first_seen_at' can't be null";
        }
        if ($this->container['last_seen_at'] === null) {
            $invalidProperties[] = "'last_seen_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['aggregation_keys'] === null) {
            $invalidProperties[] = "'aggregation_keys' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Issue ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string $team_id ID of the project
     *
     * @return self
     */
    public function setTeamId($team_id)
    {
        if (is_null($team_id)) {
            throw new \InvalidArgumentException('non-nullable team_id cannot be null');
        }
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Hookdeck\Model\IssueStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Hookdeck\Model\IssueStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets opened_at
     *
     * @return \DateTime
     */
    public function getOpenedAt()
    {
        return $this->container['opened_at'];
    }

    /**
     * Sets opened_at
     *
     * @param \DateTime $opened_at ISO timestamp for when the issue was last opened
     *
     * @return self
     */
    public function setOpenedAt($opened_at)
    {
        if (is_null($opened_at)) {
            throw new \InvalidArgumentException('non-nullable opened_at cannot be null');
        }
        $this->container['opened_at'] = $opened_at;

        return $this;
    }

    /**
     * Gets first_seen_at
     *
     * @return \DateTime
     */
    public function getFirstSeenAt()
    {
        return $this->container['first_seen_at'];
    }

    /**
     * Sets first_seen_at
     *
     * @param \DateTime $first_seen_at ISO timestamp for when the issue was first opened
     *
     * @return self
     */
    public function setFirstSeenAt($first_seen_at)
    {
        if (is_null($first_seen_at)) {
            throw new \InvalidArgumentException('non-nullable first_seen_at cannot be null');
        }
        $this->container['first_seen_at'] = $first_seen_at;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return \DateTime
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param \DateTime $last_seen_at ISO timestamp for when the issue last occured
     *
     * @return self
     */
    public function setLastSeenAt($last_seen_at)
    {
        if (is_null($last_seen_at)) {
            throw new \InvalidArgumentException('non-nullable last_seen_at cannot be null');
        }
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets last_updated_by
     *
     * @return string|null
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     *
     * @param string|null $last_updated_by Deprecated, will always be set to null
     *
     * @return self
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        if (is_null($last_updated_by)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }

    /**
     * Gets dismissed_at
     *
     * @return \DateTime|null
     */
    public function getDismissedAt()
    {
        return $this->container['dismissed_at'];
    }

    /**
     * Sets dismissed_at
     *
     * @param \DateTime|null $dismissed_at ISO timestamp for when the issue was dismissed
     *
     * @return self
     */
    public function setDismissedAt($dismissed_at)
    {
        if (is_null($dismissed_at)) {
            array_push($this->openAPINullablesSetToNull, 'dismissed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismissed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismissed_at'] = $dismissed_at;

        return $this;
    }

    /**
     * Gets auto_resolved_at
     *
     * @return \DateTime|null
     */
    public function getAutoResolvedAt()
    {
        return $this->container['auto_resolved_at'];
    }

    /**
     * Sets auto_resolved_at
     *
     * @param \DateTime|null $auto_resolved_at auto_resolved_at
     *
     * @return self
     */
    public function setAutoResolvedAt($auto_resolved_at)
    {
        if (is_null($auto_resolved_at)) {
            array_push($this->openAPINullablesSetToNull, 'auto_resolved_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_resolved_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_resolved_at'] = $auto_resolved_at;

        return $this;
    }

    /**
     * Gets merged_with
     *
     * @return string|null
     */
    public function getMergedWith()
    {
        return $this->container['merged_with'];
    }

    /**
     * Sets merged_with
     *
     * @param string|null $merged_with merged_with
     *
     * @return self
     */
    public function setMergedWith($merged_with)
    {
        if (is_null($merged_with)) {
            array_push($this->openAPINullablesSetToNull, 'merged_with');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merged_with', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merged_with'] = $merged_with;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at ISO timestamp for when the issue was last updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at ISO timestamp for when the issue was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets aggregation_keys
     *
     * @return \Hookdeck\Model\TransformationIssueAggregationKeys
     */
    public function getAggregationKeys()
    {
        return $this->container['aggregation_keys'];
    }

    /**
     * Sets aggregation_keys
     *
     * @param \Hookdeck\Model\TransformationIssueAggregationKeys $aggregation_keys aggregation_keys
     *
     * @return self
     */
    public function setAggregationKeys($aggregation_keys)
    {
        if (is_null($aggregation_keys)) {
            throw new \InvalidArgumentException('non-nullable aggregation_keys cannot be null');
        }
        $this->container['aggregation_keys'] = $aggregation_keys;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return \Hookdeck\Model\TransformationIssueReference
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param \Hookdeck\Model\TransformationIssueReference $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


