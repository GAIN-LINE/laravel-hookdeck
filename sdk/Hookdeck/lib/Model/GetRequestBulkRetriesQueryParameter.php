<?php
/**
 * GetRequestBulkRetriesQueryParameter
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * GetRequestBulkRetriesQueryParameter Class Doc Comment
 *
 * @category Class
 * @description Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetRequestBulkRetriesQueryParameter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getRequestBulkRetries_query_parameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\Hookdeck\Model\GetRequestsIdParameter',
        'status' => 'string',
        'rejection_cause' => '\Hookdeck\Model\GetRequestsRejectionCauseParameter',
        'source_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterSourceId',
        'verified' => 'bool',
        'search_term' => 'string',
        'headers' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterHeaders',
        'body' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterBody',
        'parsed_query' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterParsedQuery',
        'path' => 'string',
        'ignored_count' => '\Hookdeck\Model\GetRequestsIgnoredCountParameter',
        'events_count' => '\Hookdeck\Model\GetRequestsEventsCountParameter',
        'ingested_at' => '\Hookdeck\Model\GetRequestsIngestedAtParameter',
        'bulk_retry_id' => '\Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId',
        'include' => 'string',
        'order_by' => 'string',
        'dir' => 'string',
        'limit' => 'int',
        'next' => 'string',
        'prev' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'rejection_cause' => null,
        'source_id' => null,
        'verified' => null,
        'search_term' => null,
        'headers' => null,
        'body' => null,
        'parsed_query' => null,
        'path' => null,
        'ignored_count' => null,
        'events_count' => null,
        'ingested_at' => null,
        'bulk_retry_id' => null,
        'include' => null,
        'order_by' => null,
        'dir' => null,
        'limit' => null,
        'next' => null,
        'prev' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'rejection_cause' => true,
        'source_id' => false,
        'verified' => false,
        'search_term' => false,
        'headers' => false,
        'body' => false,
        'parsed_query' => false,
        'path' => false,
        'ignored_count' => false,
        'events_count' => false,
        'ingested_at' => false,
        'bulk_retry_id' => false,
        'include' => false,
        'order_by' => false,
        'dir' => false,
        'limit' => false,
        'next' => false,
        'prev' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'rejection_cause' => 'rejection_cause',
        'source_id' => 'source_id',
        'verified' => 'verified',
        'search_term' => 'search_term',
        'headers' => 'headers',
        'body' => 'body',
        'parsed_query' => 'parsed_query',
        'path' => 'path',
        'ignored_count' => 'ignored_count',
        'events_count' => 'events_count',
        'ingested_at' => 'ingested_at',
        'bulk_retry_id' => 'bulk_retry_id',
        'include' => 'include',
        'order_by' => 'order_by',
        'dir' => 'dir',
        'limit' => 'limit',
        'next' => 'next',
        'prev' => 'prev'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'rejection_cause' => 'setRejectionCause',
        'source_id' => 'setSourceId',
        'verified' => 'setVerified',
        'search_term' => 'setSearchTerm',
        'headers' => 'setHeaders',
        'body' => 'setBody',
        'parsed_query' => 'setParsedQuery',
        'path' => 'setPath',
        'ignored_count' => 'setIgnoredCount',
        'events_count' => 'setEventsCount',
        'ingested_at' => 'setIngestedAt',
        'bulk_retry_id' => 'setBulkRetryId',
        'include' => 'setInclude',
        'order_by' => 'setOrderBy',
        'dir' => 'setDir',
        'limit' => 'setLimit',
        'next' => 'setNext',
        'prev' => 'setPrev'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'rejection_cause' => 'getRejectionCause',
        'source_id' => 'getSourceId',
        'verified' => 'getVerified',
        'search_term' => 'getSearchTerm',
        'headers' => 'getHeaders',
        'body' => 'getBody',
        'parsed_query' => 'getParsedQuery',
        'path' => 'getPath',
        'ignored_count' => 'getIgnoredCount',
        'events_count' => 'getEventsCount',
        'ingested_at' => 'getIngestedAt',
        'bulk_retry_id' => 'getBulkRetryId',
        'include' => 'getInclude',
        'order_by' => 'getOrderBy',
        'dir' => 'getDir',
        'limit' => 'getLimit',
        'next' => 'getNext',
        'prev' => 'getPrev'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACCEPTED = 'accepted';
    public const STATUS_REJECTED = 'rejected';
    public const MODEL_INCLUDE_DATA = 'data';
    public const ORDER_BY_INGESTED_AT = 'ingested_at';
    public const ORDER_BY_CREATED_AT = 'created_at';
    public const DIR_ASC = 'asc';
    public const DIR_DESC = 'desc';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPTED,
            self::STATUS_REJECTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncludeAllowableValues()
    {
        return [
            self::MODEL_INCLUDE_DATA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByAllowableValues()
    {
        return [
            self::ORDER_BY_INGESTED_AT,
            self::ORDER_BY_CREATED_AT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirAllowableValues()
    {
        return [
            self::DIR_ASC,
            self::DIR_DESC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('rejection_cause', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('search_term', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('parsed_query', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('ignored_count', $data ?? [], null);
        $this->setIfExists('events_count', $data ?? [], null);
        $this->setIfExists('ingested_at', $data ?? [], null);
        $this->setIfExists('bulk_retry_id', $data ?? [], null);
        $this->setIfExists('include', $data ?? [], null);
        $this->setIfExists('order_by', $data ?? [], null);
        $this->setIfExists('dir', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('next', $data ?? [], null);
        $this->setIfExists('prev', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['search_term']) && (mb_strlen($this->container['search_term']) < 3)) {
            $invalidProperties[] = "invalid value for 'search_term', the character length must be bigger than or equal to 3.";
        }

        $allowedValues = $this->getIncludeAllowableValues();
        if (!is_null($this->container['include']) && !in_array($this->container['include'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'include', must be one of '%s'",
                $this->container['include'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($this->container['order_by']) && !in_array($this->container['order_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_by', must be one of '%s'",
                $this->container['order_by'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['order_by']) && (mb_strlen($this->container['order_by']) > 255)) {
            $invalidProperties[] = "invalid value for 'order_by', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getDirAllowableValues();
        if (!is_null($this->container['dir']) && !in_array($this->container['dir'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dir', must be one of '%s'",
                $this->container['dir'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] > 255)) {
            $invalidProperties[] = "invalid value for 'limit', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next']) && (mb_strlen($this->container['next']) > 255)) {
            $invalidProperties[] = "invalid value for 'next', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['prev']) && (mb_strlen($this->container['prev']) > 255)) {
            $invalidProperties[] = "invalid value for 'prev', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \Hookdeck\Model\GetRequestsIdParameter|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Hookdeck\Model\GetRequestsIdParameter|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Filter by status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rejection_cause
     *
     * @return \Hookdeck\Model\GetRequestsRejectionCauseParameter|null
     */
    public function getRejectionCause()
    {
        return $this->container['rejection_cause'];
    }

    /**
     * Sets rejection_cause
     *
     * @param \Hookdeck\Model\GetRequestsRejectionCauseParameter|null $rejection_cause rejection_cause
     *
     * @return self
     */
    public function setRejectionCause($rejection_cause)
    {
        if (is_null($rejection_cause)) {
            array_push($this->openAPINullablesSetToNull, 'rejection_cause');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rejection_cause', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rejection_cause'] = $rejection_cause;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterSourceId|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterSourceId|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified Filter by verification status
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets search_term
     *
     * @return string|null
     */
    public function getSearchTerm()
    {
        return $this->container['search_term'];
    }

    /**
     * Sets search_term
     *
     * @param string|null $search_term URL Encoded string of the value to match partially to the body, headers, parsed_query or path
     *
     * @return self
     */
    public function setSearchTerm($search_term)
    {
        if (is_null($search_term)) {
            throw new \InvalidArgumentException('non-nullable search_term cannot be null');
        }

        if ((mb_strlen($search_term) < 3)) {
            throw new \InvalidArgumentException('invalid length for $search_term when calling GetRequestBulkRetriesQueryParameter., must be bigger than or equal to 3.');
        }

        $this->container['search_term'] = $search_term;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterHeaders|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterHeaders|null $headers headers
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        if (is_null($headers)) {
            throw new \InvalidArgumentException('non-nullable headers cannot be null');
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets body
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterBody|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterBody|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets parsed_query
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterParsedQuery|null
     */
    public function getParsedQuery()
    {
        return $this->container['parsed_query'];
    }

    /**
     * Sets parsed_query
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterParsedQuery|null $parsed_query parsed_query
     *
     * @return self
     */
    public function setParsedQuery($parsed_query)
    {
        if (is_null($parsed_query)) {
            throw new \InvalidArgumentException('non-nullable parsed_query cannot be null');
        }
        $this->container['parsed_query'] = $parsed_query;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path URL Encoded string of the value to match partially to the path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets ignored_count
     *
     * @return \Hookdeck\Model\GetRequestsIgnoredCountParameter|null
     */
    public function getIgnoredCount()
    {
        return $this->container['ignored_count'];
    }

    /**
     * Sets ignored_count
     *
     * @param \Hookdeck\Model\GetRequestsIgnoredCountParameter|null $ignored_count ignored_count
     *
     * @return self
     */
    public function setIgnoredCount($ignored_count)
    {
        if (is_null($ignored_count)) {
            throw new \InvalidArgumentException('non-nullable ignored_count cannot be null');
        }
        $this->container['ignored_count'] = $ignored_count;

        return $this;
    }

    /**
     * Gets events_count
     *
     * @return \Hookdeck\Model\GetRequestsEventsCountParameter|null
     */
    public function getEventsCount()
    {
        return $this->container['events_count'];
    }

    /**
     * Sets events_count
     *
     * @param \Hookdeck\Model\GetRequestsEventsCountParameter|null $events_count events_count
     *
     * @return self
     */
    public function setEventsCount($events_count)
    {
        if (is_null($events_count)) {
            throw new \InvalidArgumentException('non-nullable events_count cannot be null');
        }
        $this->container['events_count'] = $events_count;

        return $this;
    }

    /**
     * Gets ingested_at
     *
     * @return \Hookdeck\Model\GetRequestsIngestedAtParameter|null
     */
    public function getIngestedAt()
    {
        return $this->container['ingested_at'];
    }

    /**
     * Sets ingested_at
     *
     * @param \Hookdeck\Model\GetRequestsIngestedAtParameter|null $ingested_at ingested_at
     *
     * @return self
     */
    public function setIngestedAt($ingested_at)
    {
        if (is_null($ingested_at)) {
            throw new \InvalidArgumentException('non-nullable ingested_at cannot be null');
        }
        $this->container['ingested_at'] = $ingested_at;

        return $this;
    }

    /**
     * Gets bulk_retry_id
     *
     * @return \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null
     */
    public function getBulkRetryId()
    {
        return $this->container['bulk_retry_id'];
    }

    /**
     * Sets bulk_retry_id
     *
     * @param \Hookdeck\Model\GetEventBulkRetriesQueryParameterIssueId|null $bulk_retry_id bulk_retry_id
     *
     * @return self
     */
    public function setBulkRetryId($bulk_retry_id)
    {
        if (is_null($bulk_retry_id)) {
            throw new \InvalidArgumentException('non-nullable bulk_retry_id cannot be null');
        }
        $this->container['bulk_retry_id'] = $bulk_retry_id;

        return $this;
    }

    /**
     * Gets include
     *
     * @return string|null
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param string|null $include include
     *
     * @return self
     */
    public function setInclude($include)
    {
        if (is_null($include)) {
            throw new \InvalidArgumentException('non-nullable include cannot be null');
        }
        $allowedValues = $this->getIncludeAllowableValues();
        if (!in_array($include, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'include', must be one of '%s'",
                    $include,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string|null
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string|null $order_by Sort key
     *
     * @return self
     */
    public function setOrderBy($order_by)
    {
        if (is_null($order_by)) {
            throw new \InvalidArgumentException('non-nullable order_by cannot be null');
        }
        $allowedValues = $this->getOrderByAllowableValues();
        if (!in_array($order_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_by', must be one of '%s'",
                    $order_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($order_by) > 255)) {
            throw new \InvalidArgumentException('invalid length for $order_by when calling GetRequestBulkRetriesQueryParameter., must be smaller than or equal to 255.');
        }

        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets dir
     *
     * @return string|null
     */
    public function getDir()
    {
        return $this->container['dir'];
    }

    /**
     * Sets dir
     *
     * @param string|null $dir Sort direction
     *
     * @return self
     */
    public function setDir($dir)
    {
        if (is_null($dir)) {
            throw new \InvalidArgumentException('non-nullable dir cannot be null');
        }
        $allowedValues = $this->getDirAllowableValues();
        if (!in_array($dir, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dir', must be one of '%s'",
                    $dir,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dir'] = $dir;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Result set size
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }

        if (($limit > 255)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling GetRequestBulkRetriesQueryParameter., must be smaller than or equal to 255.');
        }
        if (($limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling GetRequestBulkRetriesQueryParameter., must be bigger than or equal to 0.');
        }

        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets next
     *
     * @return string|null
     */
    public function getNext()
    {
        return $this->container['next'];
    }

    /**
     * Sets next
     *
     * @param string|null $next The ID to provide in the query to get the next set of results
     *
     * @return self
     */
    public function setNext($next)
    {
        if (is_null($next)) {
            throw new \InvalidArgumentException('non-nullable next cannot be null');
        }
        if ((mb_strlen($next) > 255)) {
            throw new \InvalidArgumentException('invalid length for $next when calling GetRequestBulkRetriesQueryParameter., must be smaller than or equal to 255.');
        }

        $this->container['next'] = $next;

        return $this;
    }

    /**
     * Gets prev
     *
     * @return string|null
     */
    public function getPrev()
    {
        return $this->container['prev'];
    }

    /**
     * Sets prev
     *
     * @param string|null $prev The ID to provide in the query to get the previous set of results
     *
     * @return self
     */
    public function setPrev($prev)
    {
        if (is_null($prev)) {
            throw new \InvalidArgumentException('non-nullable prev cannot be null');
        }
        if ((mb_strlen($prev) > 255)) {
            throw new \InvalidArgumentException('invalid length for $prev when calling GetRequestBulkRetriesQueryParameter., must be smaller than or equal to 255.');
        }

        $this->container['prev'] = $prev;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


