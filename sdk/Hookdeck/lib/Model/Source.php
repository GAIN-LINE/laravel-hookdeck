<?php
/**
 * Source
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * Source Class Doc Comment
 *
 * @category Class
 * @description Associated [Source](#source-object) object
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Source implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Source';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'team_id' => 'string',
        'url' => 'string',
        'type' => 'string',
        'authenticated' => 'bool',
        'config' => '\Hookdeck\Model\SourceConfig',
        'disabled_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'team_id' => null,
        'url' => 'URL',
        'type' => null,
        'authenticated' => null,
        'config' => null,
        'disabled_at' => 'date-time',
        'updated_at' => 'date-time',
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'description' => true,
        'team_id' => false,
        'url' => false,
        'type' => false,
        'authenticated' => false,
        'config' => false,
        'disabled_at' => true,
        'updated_at' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'team_id' => 'team_id',
        'url' => 'url',
        'type' => 'type',
        'authenticated' => 'authenticated',
        'config' => 'config',
        'disabled_at' => 'disabled_at',
        'updated_at' => 'updated_at',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'team_id' => 'setTeamId',
        'url' => 'setUrl',
        'type' => 'setType',
        'authenticated' => 'setAuthenticated',
        'config' => 'setConfig',
        'disabled_at' => 'setDisabledAt',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'team_id' => 'getTeamId',
        'url' => 'getUrl',
        'type' => 'getType',
        'authenticated' => 'getAuthenticated',
        'config' => 'getConfig',
        'disabled_at' => 'getDisabledAt',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_AIPRISE = 'AIPRISE';
    public const TYPE_DOCUSIGN = 'DOCUSIGN';
    public const TYPE_PUBLISH_API = 'PUBLISH_API';
    public const TYPE_WEBHOOK = 'WEBHOOK';
    public const TYPE_HTTP = 'HTTP';
    public const TYPE_MANAGED = 'MANAGED';
    public const TYPE_SANITY = 'SANITY';
    public const TYPE_BIGCOMMERCE = 'BIGCOMMERCE';
    public const TYPE_POLAR = 'POLAR';
    public const TYPE_BRIDGE = 'BRIDGE';
    public const TYPE_CLOUDSIGNAL = 'CLOUDSIGNAL';
    public const TYPE_COURIER = 'COURIER';
    public const TYPE_MERAKI = 'MERAKI';
    public const TYPE_FIREBLOCKS = 'FIREBLOCKS';
    public const TYPE_FRONTAPP = 'FRONTAPP';
    public const TYPE_ZOOM = 'ZOOM';
    public const TYPE_TWITTER = 'TWITTER';
    public const TYPE_RECHARGE = 'RECHARGE';
    public const TYPE_RING_CENTRAL = 'RING_CENTRAL';
    public const TYPE_STRIPE = 'STRIPE';
    public const TYPE_PROPERTY_FINDER = 'PROPERTY-FINDER';
    public const TYPE_QUOTER = 'QUOTER';
    public const TYPE_SHOPIFY = 'SHOPIFY';
    public const TYPE_TWILIO = 'TWILIO';
    public const TYPE_GITHUB = 'GITHUB';
    public const TYPE_POSTMARK = 'POSTMARK';
    public const TYPE_TALLY = 'TALLY';
    public const TYPE_TYPEFORM = 'TYPEFORM';
    public const TYPE_PICQER = 'PICQER';
    public const TYPE_XERO = 'XERO';
    public const TYPE_SVIX = 'SVIX';
    public const TYPE_ADYEN = 'ADYEN';
    public const TYPE_AKENEO = 'AKENEO';
    public const TYPE_GITLAB = 'GITLAB';
    public const TYPE_WOOCOMMERCE = 'WOOCOMMERCE';
    public const TYPE_OKTA = 'OKTA';
    public const TYPE_OURA = 'OURA';
    public const TYPE_COMMERCELAYER = 'COMMERCELAYER';
    public const TYPE_HUBSPOT = 'HUBSPOT';
    public const TYPE_MAILGUN = 'MAILGUN';
    public const TYPE_PERSONA = 'PERSONA';
    public const TYPE_PIPEDRIVE = 'PIPEDRIVE';
    public const TYPE_SENDGRID = 'SENDGRID';
    public const TYPE_WORKOS = 'WORKOS';
    public const TYPE_SYNCTERA = 'SYNCTERA';
    public const TYPE_AWS_SNS = 'AWS_SNS';
    public const TYPE_THREE_D_EYE = 'THREE_D_EYE';
    public const TYPE_TWITCH = 'TWITCH';
    public const TYPE_ENODE = 'ENODE';
    public const TYPE_FAVRO = 'FAVRO';
    public const TYPE_LINEAR = 'LINEAR';
    public const TYPE_SHOPLINE = 'SHOPLINE';
    public const TYPE_WIX = 'WIX';
    public const TYPE_NMI = 'NMI';
    public const TYPE_ORB = 'ORB';
    public const TYPE_PYLON = 'PYLON';
    public const TYPE_RAZORPAY = 'RAZORPAY';
    public const TYPE_REPAY = 'REPAY';
    public const TYPE_SQUARE = 'SQUARE';
    public const TYPE_SOLIDGATE = 'SOLIDGATE';
    public const TYPE_TRELLO = 'TRELLO';
    public const TYPE_EBAY = 'EBAY';
    public const TYPE_TELNYX = 'TELNYX';
    public const TYPE_DISCORD = 'DISCORD';
    public const TYPE_TOKENIO = 'TOKENIO';
    public const TYPE_FISERV = 'FISERV';
    public const TYPE_BONDSMITH = 'BONDSMITH';
    public const TYPE_VERCEL_LOG_DRAINS = 'VERCEL_LOG_DRAINS';
    public const TYPE_VERCEL = 'VERCEL';
    public const TYPE_TEBEX = 'TEBEX';
    public const TYPE_SLACK = 'SLACK';
    public const TYPE_MAILCHIMP = 'MAILCHIMP';
    public const TYPE_PADDLE = 'PADDLE';
    public const TYPE_PAYPAL = 'PAYPAL';
    public const TYPE_TREEZOR = 'TREEZOR';
    public const TYPE_PRAXIS = 'PRAXIS';
    public const TYPE_CUSTOMERIO = 'CUSTOMERIO';
    public const TYPE_FACEBOOK = 'FACEBOOK';
    public const TYPE_WHATSAPP = 'WHATSAPP';
    public const TYPE_REPLICATE = 'REPLICATE';
    public const TYPE_TIKTOK = 'TIKTOK';
    public const TYPE_AIRWALLEX = 'AIRWALLEX';
    public const TYPE_ZENDESK = 'ZENDESK';
    public const TYPE_UPOLLO = 'UPOLLO';
    public const TYPE_SMILE = 'SMILE';
    public const TYPE_GOCARDLESS = 'GOCARDLESS';
    public const TYPE_LINKEDIN = 'LINKEDIN';
    public const TYPE_STRAVA = 'STRAVA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AIPRISE,
            self::TYPE_DOCUSIGN,
            self::TYPE_PUBLISH_API,
            self::TYPE_WEBHOOK,
            self::TYPE_HTTP,
            self::TYPE_MANAGED,
            self::TYPE_SANITY,
            self::TYPE_BIGCOMMERCE,
            self::TYPE_POLAR,
            self::TYPE_BRIDGE,
            self::TYPE_CLOUDSIGNAL,
            self::TYPE_COURIER,
            self::TYPE_MERAKI,
            self::TYPE_FIREBLOCKS,
            self::TYPE_FRONTAPP,
            self::TYPE_ZOOM,
            self::TYPE_TWITTER,
            self::TYPE_RECHARGE,
            self::TYPE_RING_CENTRAL,
            self::TYPE_STRIPE,
            self::TYPE_PROPERTY_FINDER,
            self::TYPE_QUOTER,
            self::TYPE_SHOPIFY,
            self::TYPE_TWILIO,
            self::TYPE_GITHUB,
            self::TYPE_POSTMARK,
            self::TYPE_TALLY,
            self::TYPE_TYPEFORM,
            self::TYPE_PICQER,
            self::TYPE_XERO,
            self::TYPE_SVIX,
            self::TYPE_ADYEN,
            self::TYPE_AKENEO,
            self::TYPE_GITLAB,
            self::TYPE_WOOCOMMERCE,
            self::TYPE_OKTA,
            self::TYPE_OURA,
            self::TYPE_COMMERCELAYER,
            self::TYPE_HUBSPOT,
            self::TYPE_MAILGUN,
            self::TYPE_PERSONA,
            self::TYPE_PIPEDRIVE,
            self::TYPE_SENDGRID,
            self::TYPE_WORKOS,
            self::TYPE_SYNCTERA,
            self::TYPE_AWS_SNS,
            self::TYPE_THREE_D_EYE,
            self::TYPE_TWITCH,
            self::TYPE_ENODE,
            self::TYPE_FAVRO,
            self::TYPE_LINEAR,
            self::TYPE_SHOPLINE,
            self::TYPE_WIX,
            self::TYPE_NMI,
            self::TYPE_ORB,
            self::TYPE_PYLON,
            self::TYPE_RAZORPAY,
            self::TYPE_REPAY,
            self::TYPE_SQUARE,
            self::TYPE_SOLIDGATE,
            self::TYPE_TRELLO,
            self::TYPE_EBAY,
            self::TYPE_TELNYX,
            self::TYPE_DISCORD,
            self::TYPE_TOKENIO,
            self::TYPE_FISERV,
            self::TYPE_BONDSMITH,
            self::TYPE_VERCEL_LOG_DRAINS,
            self::TYPE_VERCEL,
            self::TYPE_TEBEX,
            self::TYPE_SLACK,
            self::TYPE_MAILCHIMP,
            self::TYPE_PADDLE,
            self::TYPE_PAYPAL,
            self::TYPE_TREEZOR,
            self::TYPE_PRAXIS,
            self::TYPE_CUSTOMERIO,
            self::TYPE_FACEBOOK,
            self::TYPE_WHATSAPP,
            self::TYPE_REPLICATE,
            self::TYPE_TIKTOK,
            self::TYPE_AIRWALLEX,
            self::TYPE_ZENDESK,
            self::TYPE_UPOLLO,
            self::TYPE_SMILE,
            self::TYPE_GOCARDLESS,
            self::TYPE_LINKEDIN,
            self::TYPE_STRAVA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('authenticated', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('disabled_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['team_id'] === null) {
            $invalidProperties[] = "'team_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['authenticated'] === null) {
            $invalidProperties[] = "'authenticated' can't be null";
        }
        if ($this->container['disabled_at'] === null) {
            $invalidProperties[] = "'disabled_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the source
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name for the source
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the source
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string $team_id ID of the project
     *
     * @return self
     */
    public function setTeamId($team_id)
    {
        if (is_null($team_id)) {
            throw new \InvalidArgumentException('non-nullable team_id cannot be null');
        }
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url A unique URL that must be supplied to your webhook's provider
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the source
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets authenticated
     *
     * @return bool
     */
    public function getAuthenticated()
    {
        return $this->container['authenticated'];
    }

    /**
     * Sets authenticated
     *
     * @param bool $authenticated Whether the source is authenticated
     *
     * @return self
     */
    public function setAuthenticated($authenticated)
    {
        if (is_null($authenticated)) {
            throw new \InvalidArgumentException('non-nullable authenticated cannot be null');
        }
        $this->container['authenticated'] = $authenticated;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Hookdeck\Model\SourceConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Hookdeck\Model\SourceConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets disabled_at
     *
     * @return \DateTime
     */
    public function getDisabledAt()
    {
        return $this->container['disabled_at'];
    }

    /**
     * Sets disabled_at
     *
     * @param \DateTime $disabled_at Date the source was disabled
     *
     * @return self
     */
    public function setDisabledAt($disabled_at)
    {
        if (is_null($disabled_at)) {
            array_push($this->openAPINullablesSetToNull, 'disabled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disabled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disabled_at'] = $disabled_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date the source was last updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date the source was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


