<?php
/**
 * EventAttempt
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * EventAttempt Class Doc Comment
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventAttempt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventAttempt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'team_id' => 'string',
        'event_id' => 'string',
        'destination_id' => 'string',
        'response_status' => 'int',
        'attempt_number' => 'int',
        'trigger' => '\Hookdeck\Model\AttemptTrigger',
        'error_code' => '\Hookdeck\Model\AttemptErrorCodes',
        'body' => '\Hookdeck\Model\EventAttemptBody',
        'requested_url' => 'string',
        'http_method' => 'string',
        'bulk_retry_id' => 'string',
        'status' => '\Hookdeck\Model\AttemptStatus',
        'successful_at' => '\DateTime',
        'delivered_at' => '\DateTime',
        'responded_at' => '\DateTime',
        'delivery_latency' => 'int',
        'response_latency' => 'int',
        'updated_at' => '\DateTime',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'team_id' => null,
        'event_id' => null,
        'destination_id' => null,
        'response_status' => null,
        'attempt_number' => null,
        'trigger' => null,
        'error_code' => null,
        'body' => null,
        'requested_url' => null,
        'http_method' => null,
        'bulk_retry_id' => null,
        'status' => null,
        'successful_at' => 'date-time',
        'delivered_at' => 'date-time',
        'responded_at' => 'date-time',
        'delivery_latency' => null,
        'response_latency' => null,
        'updated_at' => 'date-time',
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'team_id' => false,
        'event_id' => false,
        'destination_id' => false,
        'response_status' => true,
        'attempt_number' => true,
        'trigger' => true,
        'error_code' => false,
        'body' => false,
        'requested_url' => true,
        'http_method' => true,
        'bulk_retry_id' => true,
        'status' => false,
        'successful_at' => true,
        'delivered_at' => true,
        'responded_at' => true,
        'delivery_latency' => true,
        'response_latency' => true,
        'updated_at' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'team_id' => 'team_id',
        'event_id' => 'event_id',
        'destination_id' => 'destination_id',
        'response_status' => 'response_status',
        'attempt_number' => 'attempt_number',
        'trigger' => 'trigger',
        'error_code' => 'error_code',
        'body' => 'body',
        'requested_url' => 'requested_url',
        'http_method' => 'http_method',
        'bulk_retry_id' => 'bulk_retry_id',
        'status' => 'status',
        'successful_at' => 'successful_at',
        'delivered_at' => 'delivered_at',
        'responded_at' => 'responded_at',
        'delivery_latency' => 'delivery_latency',
        'response_latency' => 'response_latency',
        'updated_at' => 'updated_at',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'team_id' => 'setTeamId',
        'event_id' => 'setEventId',
        'destination_id' => 'setDestinationId',
        'response_status' => 'setResponseStatus',
        'attempt_number' => 'setAttemptNumber',
        'trigger' => 'setTrigger',
        'error_code' => 'setErrorCode',
        'body' => 'setBody',
        'requested_url' => 'setRequestedUrl',
        'http_method' => 'setHttpMethod',
        'bulk_retry_id' => 'setBulkRetryId',
        'status' => 'setStatus',
        'successful_at' => 'setSuccessfulAt',
        'delivered_at' => 'setDeliveredAt',
        'responded_at' => 'setRespondedAt',
        'delivery_latency' => 'setDeliveryLatency',
        'response_latency' => 'setResponseLatency',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'team_id' => 'getTeamId',
        'event_id' => 'getEventId',
        'destination_id' => 'getDestinationId',
        'response_status' => 'getResponseStatus',
        'attempt_number' => 'getAttemptNumber',
        'trigger' => 'getTrigger',
        'error_code' => 'getErrorCode',
        'body' => 'getBody',
        'requested_url' => 'getRequestedUrl',
        'http_method' => 'getHttpMethod',
        'bulk_retry_id' => 'getBulkRetryId',
        'status' => 'getStatus',
        'successful_at' => 'getSuccessfulAt',
        'delivered_at' => 'getDeliveredAt',
        'responded_at' => 'getRespondedAt',
        'delivery_latency' => 'getDeliveryLatency',
        'response_latency' => 'getResponseLatency',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HTTP_METHOD_GET = 'GET';
    public const HTTP_METHOD_POST = 'POST';
    public const HTTP_METHOD_PUT = 'PUT';
    public const HTTP_METHOD_PATCH = 'PATCH';
    public const HTTP_METHOD_DELETE = 'DELETE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpMethodAllowableValues()
    {
        return [
            self::HTTP_METHOD_GET,
            self::HTTP_METHOD_POST,
            self::HTTP_METHOD_PUT,
            self::HTTP_METHOD_PATCH,
            self::HTTP_METHOD_DELETE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('destination_id', $data ?? [], null);
        $this->setIfExists('response_status', $data ?? [], null);
        $this->setIfExists('attempt_number', $data ?? [], null);
        $this->setIfExists('trigger', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('requested_url', $data ?? [], null);
        $this->setIfExists('http_method', $data ?? [], null);
        $this->setIfExists('bulk_retry_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('successful_at', $data ?? [], null);
        $this->setIfExists('delivered_at', $data ?? [], null);
        $this->setIfExists('responded_at', $data ?? [], null);
        $this->setIfExists('delivery_latency', $data ?? [], null);
        $this->setIfExists('response_latency', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['team_id'] === null) {
            $invalidProperties[] = "'team_id' can't be null";
        }
        if ($this->container['event_id'] === null) {
            $invalidProperties[] = "'event_id' can't be null";
        }
        if ($this->container['destination_id'] === null) {
            $invalidProperties[] = "'destination_id' can't be null";
        }
        $allowedValues = $this->getHttpMethodAllowableValues();
        if (!is_null($this->container['http_method']) && !in_array($this->container['http_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'http_method', must be one of '%s'",
                $this->container['http_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Attempt ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string $team_id ID of the project
     *
     * @return self
     */
    public function setTeamId($team_id)
    {
        if (is_null($team_id)) {
            throw new \InvalidArgumentException('non-nullable team_id cannot be null');
        }
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id Event ID
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        if (is_null($event_id)) {
            throw new \InvalidArgumentException('non-nullable event_id cannot be null');
        }
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return string
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param string $destination_id Destination ID
     *
     * @return self
     */
    public function setDestinationId($destination_id)
    {
        if (is_null($destination_id)) {
            throw new \InvalidArgumentException('non-nullable destination_id cannot be null');
        }
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets response_status
     *
     * @return int|null
     */
    public function getResponseStatus()
    {
        return $this->container['response_status'];
    }

    /**
     * Sets response_status
     *
     * @param int|null $response_status Attempt's HTTP response code
     *
     * @return self
     */
    public function setResponseStatus($response_status)
    {
        if (is_null($response_status)) {
            array_push($this->openAPINullablesSetToNull, 'response_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response_status'] = $response_status;

        return $this;
    }

    /**
     * Gets attempt_number
     *
     * @return int|null
     */
    public function getAttemptNumber()
    {
        return $this->container['attempt_number'];
    }

    /**
     * Sets attempt_number
     *
     * @param int|null $attempt_number Sequential number of attempts (up to and including this one) made for the associated event
     *
     * @return self
     */
    public function setAttemptNumber($attempt_number)
    {
        if (is_null($attempt_number)) {
            array_push($this->openAPINullablesSetToNull, 'attempt_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attempt_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attempt_number'] = $attempt_number;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return \Hookdeck\Model\AttemptTrigger|null
     */
    public function getTrigger()
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param \Hookdeck\Model\AttemptTrigger|null $trigger trigger
     *
     * @return self
     */
    public function setTrigger($trigger)
    {
        if (is_null($trigger)) {
            array_push($this->openAPINullablesSetToNull, 'trigger');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trigger', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return \Hookdeck\Model\AttemptErrorCodes|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \Hookdeck\Model\AttemptErrorCodes|null $error_code error_code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets body
     *
     * @return \Hookdeck\Model\EventAttemptBody|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Hookdeck\Model\EventAttemptBody|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets requested_url
     *
     * @return string|null
     */
    public function getRequestedUrl()
    {
        return $this->container['requested_url'];
    }

    /**
     * Sets requested_url
     *
     * @param string|null $requested_url URL of the destination where delivery was attempted
     *
     * @return self
     */
    public function setRequestedUrl($requested_url)
    {
        if (is_null($requested_url)) {
            array_push($this->openAPINullablesSetToNull, 'requested_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requested_url'] = $requested_url;

        return $this;
    }

    /**
     * Gets http_method
     *
     * @return string|null
     */
    public function getHttpMethod()
    {
        return $this->container['http_method'];
    }

    /**
     * Sets http_method
     *
     * @param string|null $http_method HTTP method used to deliver the attempt
     *
     * @return self
     */
    public function setHttpMethod($http_method)
    {
        if (is_null($http_method)) {
            array_push($this->openAPINullablesSetToNull, 'http_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('http_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getHttpMethodAllowableValues();
        if (!is_null($http_method) && !in_array($http_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'http_method', must be one of '%s'",
                    $http_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_method'] = $http_method;

        return $this;
    }

    /**
     * Gets bulk_retry_id
     *
     * @return string|null
     */
    public function getBulkRetryId()
    {
        return $this->container['bulk_retry_id'];
    }

    /**
     * Sets bulk_retry_id
     *
     * @param string|null $bulk_retry_id ID of associated bulk retry
     *
     * @return self
     */
    public function setBulkRetryId($bulk_retry_id)
    {
        if (is_null($bulk_retry_id)) {
            array_push($this->openAPINullablesSetToNull, 'bulk_retry_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bulk_retry_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bulk_retry_id'] = $bulk_retry_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Hookdeck\Model\AttemptStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Hookdeck\Model\AttemptStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets successful_at
     *
     * @return \DateTime|null
     */
    public function getSuccessfulAt()
    {
        return $this->container['successful_at'];
    }

    /**
     * Sets successful_at
     *
     * @param \DateTime|null $successful_at Date the attempt was successful
     *
     * @return self
     */
    public function setSuccessfulAt($successful_at)
    {
        if (is_null($successful_at)) {
            array_push($this->openAPINullablesSetToNull, 'successful_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('successful_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['successful_at'] = $successful_at;

        return $this;
    }

    /**
     * Gets delivered_at
     *
     * @return \DateTime|null
     */
    public function getDeliveredAt()
    {
        return $this->container['delivered_at'];
    }

    /**
     * Sets delivered_at
     *
     * @param \DateTime|null $delivered_at Date the attempt was delivered
     *
     * @return self
     */
    public function setDeliveredAt($delivered_at)
    {
        if (is_null($delivered_at)) {
            array_push($this->openAPINullablesSetToNull, 'delivered_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivered_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivered_at'] = $delivered_at;

        return $this;
    }

    /**
     * Gets responded_at
     *
     * @return \DateTime|null
     */
    public function getRespondedAt()
    {
        return $this->container['responded_at'];
    }

    /**
     * Sets responded_at
     *
     * @param \DateTime|null $responded_at Date the destination responded to this attempt
     *
     * @return self
     */
    public function setRespondedAt($responded_at)
    {
        if (is_null($responded_at)) {
            array_push($this->openAPINullablesSetToNull, 'responded_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responded_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responded_at'] = $responded_at;

        return $this;
    }

    /**
     * Gets delivery_latency
     *
     * @return int|null
     */
    public function getDeliveryLatency()
    {
        return $this->container['delivery_latency'];
    }

    /**
     * Sets delivery_latency
     *
     * @param int|null $delivery_latency Time elapsed between attempt initiation and final delivery (in ms)
     *
     * @return self
     */
    public function setDeliveryLatency($delivery_latency)
    {
        if (is_null($delivery_latency)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_latency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_latency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_latency'] = $delivery_latency;

        return $this;
    }

    /**
     * Gets response_latency
     *
     * @return int|null
     */
    public function getResponseLatency()
    {
        return $this->container['response_latency'];
    }

    /**
     * Sets response_latency
     *
     * @param int|null $response_latency Time elapsed between attempt initiation and a response from the destination (in ms)
     *
     * @return self
     */
    public function setResponseLatency($response_latency)
    {
        if (is_null($response_latency)) {
            array_push($this->openAPINullablesSetToNull, 'response_latency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_latency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response_latency'] = $response_latency;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date the attempt was last updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date the attempt was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


