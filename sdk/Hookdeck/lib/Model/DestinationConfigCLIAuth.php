<?php
/**
 * DestinationConfigCLIAuth
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * DestinationConfigCLIAuth Class Doc Comment
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DestinationConfigCLIAuth implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DestinationConfigCLIAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'signing_secret' => 'string',
        'username' => 'string',
        'password' => 'string',
        'api_key' => 'string',
        'to' => 'string',
        'token' => 'string',
        'auth_server' => 'string',
        'client_id' => 'string',
        'client_secret' => 'string',
        'scope' => 'string',
        'authentication_type' => 'string',
        'refresh_token' => 'string',
        'access_key_id' => 'string',
        'secret_access_key' => 'string',
        'region' => 'string',
        'service' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'signing_secret' => null,
        'username' => null,
        'password' => null,
        'api_key' => null,
        'to' => null,
        'token' => null,
        'auth_server' => null,
        'client_id' => null,
        'client_secret' => null,
        'scope' => null,
        'authentication_type' => null,
        'refresh_token' => null,
        'access_key_id' => null,
        'secret_access_key' => null,
        'region' => null,
        'service' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => false,
        'signing_secret' => false,
        'username' => false,
        'password' => false,
        'api_key' => false,
        'to' => false,
        'token' => false,
        'auth_server' => false,
        'client_id' => false,
        'client_secret' => false,
        'scope' => false,
        'authentication_type' => false,
        'refresh_token' => false,
        'access_key_id' => false,
        'secret_access_key' => false,
        'region' => false,
        'service' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'signing_secret' => 'signing_secret',
        'username' => 'username',
        'password' => 'password',
        'api_key' => 'api_key',
        'to' => 'to',
        'token' => 'token',
        'auth_server' => 'auth_server',
        'client_id' => 'client_id',
        'client_secret' => 'client_secret',
        'scope' => 'scope',
        'authentication_type' => 'authentication_type',
        'refresh_token' => 'refresh_token',
        'access_key_id' => 'access_key_id',
        'secret_access_key' => 'secret_access_key',
        'region' => 'region',
        'service' => 'service'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'signing_secret' => 'setSigningSecret',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'api_key' => 'setApiKey',
        'to' => 'setTo',
        'token' => 'setToken',
        'auth_server' => 'setAuthServer',
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'scope' => 'setScope',
        'authentication_type' => 'setAuthenticationType',
        'refresh_token' => 'setRefreshToken',
        'access_key_id' => 'setAccessKeyId',
        'secret_access_key' => 'setSecretAccessKey',
        'region' => 'setRegion',
        'service' => 'setService'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'signing_secret' => 'getSigningSecret',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'api_key' => 'getApiKey',
        'to' => 'getTo',
        'token' => 'getToken',
        'auth_server' => 'getAuthServer',
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'scope' => 'getScope',
        'authentication_type' => 'getAuthenticationType',
        'refresh_token' => 'getRefreshToken',
        'access_key_id' => 'getAccessKeyId',
        'secret_access_key' => 'getSecretAccessKey',
        'region' => 'getRegion',
        'service' => 'getService'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TO_HEADER = 'header';
    public const TO_QUERY = 'query';
    public const AUTHENTICATION_TYPE_BASIC = 'basic';
    public const AUTHENTICATION_TYPE_BEARER = 'bearer';
    public const AUTHENTICATION_TYPE_X_WWW_FORM_URLENCODED = 'x-www-form-urlencoded';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getToAllowableValues()
    {
        return [
            self::TO_HEADER,
            self::TO_QUERY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_BASIC,
            self::AUTHENTICATION_TYPE_BEARER,
            self::AUTHENTICATION_TYPE_X_WWW_FORM_URLENCODED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('signing_secret', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('auth_server', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('client_secret', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('authentication_type', $data ?? [], null);
        $this->setIfExists('refresh_token', $data ?? [], null);
        $this->setIfExists('access_key_id', $data ?? [], null);
        $this->setIfExists('secret_access_key', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getToAllowableValues();
        if (!is_null($this->container['to']) && !in_array($this->container['to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'to', must be one of '%s'",
                $this->container['to'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($this->container['authentication_type']) && !in_array($this->container['authentication_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication_type', must be one of '%s'",
                $this->container['authentication_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets signing_secret
     *
     * @return string|null
     */
    public function getSigningSecret()
    {
        return $this->container['signing_secret'];
    }

    /**
     * Sets signing_secret
     *
     * @param string|null $signing_secret signing_secret
     *
     * @return self
     */
    public function setSigningSecret($signing_secret)
    {
        if (is_null($signing_secret)) {
            throw new \InvalidArgumentException('non-nullable signing_secret cannot be null');
        }
        $this->container['signing_secret'] = $signing_secret;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key api_key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $allowedValues = $this->getToAllowableValues();
        if (!in_array($to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'to', must be one of '%s'",
                    $to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets auth_server
     *
     * @return string|null
     */
    public function getAuthServer()
    {
        return $this->container['auth_server'];
    }

    /**
     * Sets auth_server
     *
     * @param string|null $auth_server auth_server
     *
     * @return self
     */
    public function setAuthServer($auth_server)
    {
        if (is_null($auth_server)) {
            throw new \InvalidArgumentException('non-nullable auth_server cannot be null');
        }
        $this->container['auth_server'] = $auth_server;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string|null $client_secret client_secret
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        if (is_null($client_secret)) {
            throw new \InvalidArgumentException('non-nullable client_secret cannot be null');
        }
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope scope
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets authentication_type
     *
     * @return string|null
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     *
     * @param string|null $authentication_type authentication_type
     *
     * @return self
     */
    public function setAuthenticationType($authentication_type)
    {
        if (is_null($authentication_type)) {
            throw new \InvalidArgumentException('non-nullable authentication_type cannot be null');
        }
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!in_array($authentication_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication_type', must be one of '%s'",
                    $authentication_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets refresh_token
     *
     * @return string|null
     */
    public function getRefreshToken()
    {
        return $this->container['refresh_token'];
    }

    /**
     * Sets refresh_token
     *
     * @param string|null $refresh_token refresh_token
     *
     * @return self
     */
    public function setRefreshToken($refresh_token)
    {
        if (is_null($refresh_token)) {
            throw new \InvalidArgumentException('non-nullable refresh_token cannot be null');
        }
        $this->container['refresh_token'] = $refresh_token;

        return $this;
    }

    /**
     * Gets access_key_id
     *
     * @return string|null
     */
    public function getAccessKeyId()
    {
        return $this->container['access_key_id'];
    }

    /**
     * Sets access_key_id
     *
     * @param string|null $access_key_id access_key_id
     *
     * @return self
     */
    public function setAccessKeyId($access_key_id)
    {
        if (is_null($access_key_id)) {
            throw new \InvalidArgumentException('non-nullable access_key_id cannot be null');
        }
        $this->container['access_key_id'] = $access_key_id;

        return $this;
    }

    /**
     * Gets secret_access_key
     *
     * @return string|null
     */
    public function getSecretAccessKey()
    {
        return $this->container['secret_access_key'];
    }

    /**
     * Sets secret_access_key
     *
     * @param string|null $secret_access_key secret_access_key
     *
     * @return self
     */
    public function setSecretAccessKey($secret_access_key)
    {
        if (is_null($secret_access_key)) {
            throw new \InvalidArgumentException('non-nullable secret_access_key cannot be null');
        }
        $this->container['secret_access_key'] = $secret_access_key;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string|null $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


