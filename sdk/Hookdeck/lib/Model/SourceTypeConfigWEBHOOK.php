<?php
/**
 * SourceTypeConfigWEBHOOK
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * SourceTypeConfigWEBHOOK Class Doc Comment
 *
 * @category Class
 * @description The type config for WEBHOOK. Requires type to be &#x60;WEBHOOK&#x60;.
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SourceTypeConfigWEBHOOK implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SourceTypeConfigWEBHOOK';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowed_http_methods' => 'string[]',
        'custom_response' => '\Hookdeck\Model\SourceTypeConfigWEBHOOKCustomResponse',
        'auth_type' => 'string',
        'auth' => '\Hookdeck\Model\SourceConfigWebhookAuth'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowed_http_methods' => null,
        'custom_response' => null,
        'auth_type' => null,
        'auth' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowed_http_methods' => false,
        'custom_response' => true,
        'auth_type' => true,
        'auth' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_http_methods' => 'allowed_http_methods',
        'custom_response' => 'custom_response',
        'auth_type' => 'auth_type',
        'auth' => 'auth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowed_http_methods' => 'setAllowedHttpMethods',
        'custom_response' => 'setCustomResponse',
        'auth_type' => 'setAuthType',
        'auth' => 'setAuth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowed_http_methods' => 'getAllowedHttpMethods',
        'custom_response' => 'getCustomResponse',
        'auth_type' => 'getAuthType',
        'auth' => 'getAuth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALLOWED_HTTP_METHODS_GET = 'GET';
    public const ALLOWED_HTTP_METHODS_POST = 'POST';
    public const ALLOWED_HTTP_METHODS_PUT = 'PUT';
    public const ALLOWED_HTTP_METHODS_PATCH = 'PATCH';
    public const ALLOWED_HTTP_METHODS_DELETE = 'DELETE';
    public const AUTH_TYPE_HMAC = 'HMAC';
    public const AUTH_TYPE_BASIC_AUTH = 'BASIC_AUTH';
    public const AUTH_TYPE_API_KEY = 'API_KEY';
    public const AUTH_TYPE_AIPRISE = 'AIPRISE';
    public const AUTH_TYPE_DOCUSIGN = 'DOCUSIGN';
    public const AUTH_TYPE_PUBLISH_API = 'PUBLISH_API';
    public const AUTH_TYPE_WEBHOOK = 'WEBHOOK';
    public const AUTH_TYPE_HTTP = 'HTTP';
    public const AUTH_TYPE_MANAGED = 'MANAGED';
    public const AUTH_TYPE_SANITY = 'SANITY';
    public const AUTH_TYPE_BIGCOMMERCE = 'BIGCOMMERCE';
    public const AUTH_TYPE_POLAR = 'POLAR';
    public const AUTH_TYPE_BRIDGE = 'BRIDGE';
    public const AUTH_TYPE_CLOUDSIGNAL = 'CLOUDSIGNAL';
    public const AUTH_TYPE_COURIER = 'COURIER';
    public const AUTH_TYPE_MERAKI = 'MERAKI';
    public const AUTH_TYPE_FIREBLOCKS = 'FIREBLOCKS';
    public const AUTH_TYPE_FRONTAPP = 'FRONTAPP';
    public const AUTH_TYPE_ZOOM = 'ZOOM';
    public const AUTH_TYPE_TWITTER = 'TWITTER';
    public const AUTH_TYPE_RECHARGE = 'RECHARGE';
    public const AUTH_TYPE_RING_CENTRAL = 'RING_CENTRAL';
    public const AUTH_TYPE_STRIPE = 'STRIPE';
    public const AUTH_TYPE_PROPERTY_FINDER = 'PROPERTY-FINDER';
    public const AUTH_TYPE_QUOTER = 'QUOTER';
    public const AUTH_TYPE_SHOPIFY = 'SHOPIFY';
    public const AUTH_TYPE_TWILIO = 'TWILIO';
    public const AUTH_TYPE_GITHUB = 'GITHUB';
    public const AUTH_TYPE_POSTMARK = 'POSTMARK';
    public const AUTH_TYPE_TALLY = 'TALLY';
    public const AUTH_TYPE_TYPEFORM = 'TYPEFORM';
    public const AUTH_TYPE_PICQER = 'PICQER';
    public const AUTH_TYPE_XERO = 'XERO';
    public const AUTH_TYPE_SVIX = 'SVIX';
    public const AUTH_TYPE_ADYEN = 'ADYEN';
    public const AUTH_TYPE_AKENEO = 'AKENEO';
    public const AUTH_TYPE_GITLAB = 'GITLAB';
    public const AUTH_TYPE_WOOCOMMERCE = 'WOOCOMMERCE';
    public const AUTH_TYPE_OKTA = 'OKTA';
    public const AUTH_TYPE_OURA = 'OURA';
    public const AUTH_TYPE_COMMERCELAYER = 'COMMERCELAYER';
    public const AUTH_TYPE_HUBSPOT = 'HUBSPOT';
    public const AUTH_TYPE_MAILGUN = 'MAILGUN';
    public const AUTH_TYPE_PERSONA = 'PERSONA';
    public const AUTH_TYPE_PIPEDRIVE = 'PIPEDRIVE';
    public const AUTH_TYPE_SENDGRID = 'SENDGRID';
    public const AUTH_TYPE_WORKOS = 'WORKOS';
    public const AUTH_TYPE_SYNCTERA = 'SYNCTERA';
    public const AUTH_TYPE_AWS_SNS = 'AWS_SNS';
    public const AUTH_TYPE_THREE_D_EYE = 'THREE_D_EYE';
    public const AUTH_TYPE_TWITCH = 'TWITCH';
    public const AUTH_TYPE_ENODE = 'ENODE';
    public const AUTH_TYPE_FAVRO = 'FAVRO';
    public const AUTH_TYPE_LINEAR = 'LINEAR';
    public const AUTH_TYPE_SHOPLINE = 'SHOPLINE';
    public const AUTH_TYPE_WIX = 'WIX';
    public const AUTH_TYPE_NMI = 'NMI';
    public const AUTH_TYPE_ORB = 'ORB';
    public const AUTH_TYPE_PYLON = 'PYLON';
    public const AUTH_TYPE_RAZORPAY = 'RAZORPAY';
    public const AUTH_TYPE_REPAY = 'REPAY';
    public const AUTH_TYPE_SQUARE = 'SQUARE';
    public const AUTH_TYPE_SOLIDGATE = 'SOLIDGATE';
    public const AUTH_TYPE_TRELLO = 'TRELLO';
    public const AUTH_TYPE_EBAY = 'EBAY';
    public const AUTH_TYPE_TELNYX = 'TELNYX';
    public const AUTH_TYPE_DISCORD = 'DISCORD';
    public const AUTH_TYPE_TOKENIO = 'TOKENIO';
    public const AUTH_TYPE_FISERV = 'FISERV';
    public const AUTH_TYPE_BONDSMITH = 'BONDSMITH';
    public const AUTH_TYPE_VERCEL_LOG_DRAINS = 'VERCEL_LOG_DRAINS';
    public const AUTH_TYPE_VERCEL = 'VERCEL';
    public const AUTH_TYPE_TEBEX = 'TEBEX';
    public const AUTH_TYPE_SLACK = 'SLACK';
    public const AUTH_TYPE_MAILCHIMP = 'MAILCHIMP';
    public const AUTH_TYPE_PADDLE = 'PADDLE';
    public const AUTH_TYPE_PAYPAL = 'PAYPAL';
    public const AUTH_TYPE_TREEZOR = 'TREEZOR';
    public const AUTH_TYPE_PRAXIS = 'PRAXIS';
    public const AUTH_TYPE_CUSTOMERIO = 'CUSTOMERIO';
    public const AUTH_TYPE_FACEBOOK = 'FACEBOOK';
    public const AUTH_TYPE_WHATSAPP = 'WHATSAPP';
    public const AUTH_TYPE_REPLICATE = 'REPLICATE';
    public const AUTH_TYPE_TIKTOK = 'TIKTOK';
    public const AUTH_TYPE_AIRWALLEX = 'AIRWALLEX';
    public const AUTH_TYPE_ZENDESK = 'ZENDESK';
    public const AUTH_TYPE_UPOLLO = 'UPOLLO';
    public const AUTH_TYPE_SMILE = 'SMILE';
    public const AUTH_TYPE_GOCARDLESS = 'GOCARDLESS';
    public const AUTH_TYPE_LINKEDIN = 'LINKEDIN';
    public const AUTH_TYPE_STRAVA = 'STRAVA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowedHttpMethodsAllowableValues()
    {
        return [
            self::ALLOWED_HTTP_METHODS_GET,
            self::ALLOWED_HTTP_METHODS_POST,
            self::ALLOWED_HTTP_METHODS_PUT,
            self::ALLOWED_HTTP_METHODS_PATCH,
            self::ALLOWED_HTTP_METHODS_DELETE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_HMAC,
            self::AUTH_TYPE_BASIC_AUTH,
            self::AUTH_TYPE_API_KEY,
            self::AUTH_TYPE_AIPRISE,
            self::AUTH_TYPE_DOCUSIGN,
            self::AUTH_TYPE_PUBLISH_API,
            self::AUTH_TYPE_WEBHOOK,
            self::AUTH_TYPE_HTTP,
            self::AUTH_TYPE_MANAGED,
            self::AUTH_TYPE_SANITY,
            self::AUTH_TYPE_BIGCOMMERCE,
            self::AUTH_TYPE_POLAR,
            self::AUTH_TYPE_BRIDGE,
            self::AUTH_TYPE_CLOUDSIGNAL,
            self::AUTH_TYPE_COURIER,
            self::AUTH_TYPE_MERAKI,
            self::AUTH_TYPE_FIREBLOCKS,
            self::AUTH_TYPE_FRONTAPP,
            self::AUTH_TYPE_ZOOM,
            self::AUTH_TYPE_TWITTER,
            self::AUTH_TYPE_RECHARGE,
            self::AUTH_TYPE_RING_CENTRAL,
            self::AUTH_TYPE_STRIPE,
            self::AUTH_TYPE_PROPERTY_FINDER,
            self::AUTH_TYPE_QUOTER,
            self::AUTH_TYPE_SHOPIFY,
            self::AUTH_TYPE_TWILIO,
            self::AUTH_TYPE_GITHUB,
            self::AUTH_TYPE_POSTMARK,
            self::AUTH_TYPE_TALLY,
            self::AUTH_TYPE_TYPEFORM,
            self::AUTH_TYPE_PICQER,
            self::AUTH_TYPE_XERO,
            self::AUTH_TYPE_SVIX,
            self::AUTH_TYPE_ADYEN,
            self::AUTH_TYPE_AKENEO,
            self::AUTH_TYPE_GITLAB,
            self::AUTH_TYPE_WOOCOMMERCE,
            self::AUTH_TYPE_OKTA,
            self::AUTH_TYPE_OURA,
            self::AUTH_TYPE_COMMERCELAYER,
            self::AUTH_TYPE_HUBSPOT,
            self::AUTH_TYPE_MAILGUN,
            self::AUTH_TYPE_PERSONA,
            self::AUTH_TYPE_PIPEDRIVE,
            self::AUTH_TYPE_SENDGRID,
            self::AUTH_TYPE_WORKOS,
            self::AUTH_TYPE_SYNCTERA,
            self::AUTH_TYPE_AWS_SNS,
            self::AUTH_TYPE_THREE_D_EYE,
            self::AUTH_TYPE_TWITCH,
            self::AUTH_TYPE_ENODE,
            self::AUTH_TYPE_FAVRO,
            self::AUTH_TYPE_LINEAR,
            self::AUTH_TYPE_SHOPLINE,
            self::AUTH_TYPE_WIX,
            self::AUTH_TYPE_NMI,
            self::AUTH_TYPE_ORB,
            self::AUTH_TYPE_PYLON,
            self::AUTH_TYPE_RAZORPAY,
            self::AUTH_TYPE_REPAY,
            self::AUTH_TYPE_SQUARE,
            self::AUTH_TYPE_SOLIDGATE,
            self::AUTH_TYPE_TRELLO,
            self::AUTH_TYPE_EBAY,
            self::AUTH_TYPE_TELNYX,
            self::AUTH_TYPE_DISCORD,
            self::AUTH_TYPE_TOKENIO,
            self::AUTH_TYPE_FISERV,
            self::AUTH_TYPE_BONDSMITH,
            self::AUTH_TYPE_VERCEL_LOG_DRAINS,
            self::AUTH_TYPE_VERCEL,
            self::AUTH_TYPE_TEBEX,
            self::AUTH_TYPE_SLACK,
            self::AUTH_TYPE_MAILCHIMP,
            self::AUTH_TYPE_PADDLE,
            self::AUTH_TYPE_PAYPAL,
            self::AUTH_TYPE_TREEZOR,
            self::AUTH_TYPE_PRAXIS,
            self::AUTH_TYPE_CUSTOMERIO,
            self::AUTH_TYPE_FACEBOOK,
            self::AUTH_TYPE_WHATSAPP,
            self::AUTH_TYPE_REPLICATE,
            self::AUTH_TYPE_TIKTOK,
            self::AUTH_TYPE_AIRWALLEX,
            self::AUTH_TYPE_ZENDESK,
            self::AUTH_TYPE_UPOLLO,
            self::AUTH_TYPE_SMILE,
            self::AUTH_TYPE_GOCARDLESS,
            self::AUTH_TYPE_LINKEDIN,
            self::AUTH_TYPE_STRAVA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allowed_http_methods', $data ?? [], null);
        $this->setIfExists('custom_response', $data ?? [], null);
        $this->setIfExists('auth_type', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['allowed_http_methods']) && (count($this->container['allowed_http_methods']) < 1)) {
            $invalidProperties[] = "invalid value for 'allowed_http_methods', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['auth_type']) && !in_array($this->container['auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_type', must be one of '%s'",
                $this->container['auth_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowed_http_methods
     *
     * @return string[]|null
     */
    public function getAllowedHttpMethods()
    {
        return $this->container['allowed_http_methods'];
    }

    /**
     * Sets allowed_http_methods
     *
     * @param string[]|null $allowed_http_methods allowed_http_methods
     *
     * @return self
     */
    public function setAllowedHttpMethods($allowed_http_methods)
    {
        if (is_null($allowed_http_methods)) {
            throw new \InvalidArgumentException('non-nullable allowed_http_methods cannot be null');
        }
        $allowedValues = $this->getAllowedHttpMethodsAllowableValues();
        if (array_diff($allowed_http_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'allowed_http_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        if ((count($allowed_http_methods) < 1)) {
            throw new \InvalidArgumentException('invalid length for $allowed_http_methods when calling SourceTypeConfigWEBHOOK., number of items must be greater than or equal to 1.');
        }
        $this->container['allowed_http_methods'] = $allowed_http_methods;

        return $this;
    }

    /**
     * Gets custom_response
     *
     * @return \Hookdeck\Model\SourceTypeConfigWEBHOOKCustomResponse|null
     */
    public function getCustomResponse()
    {
        return $this->container['custom_response'];
    }

    /**
     * Sets custom_response
     *
     * @param \Hookdeck\Model\SourceTypeConfigWEBHOOKCustomResponse|null $custom_response custom_response
     *
     * @return self
     */
    public function setCustomResponse($custom_response)
    {
        if (is_null($custom_response)) {
            array_push($this->openAPINullablesSetToNull, 'custom_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_response'] = $custom_response;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string|null $auth_type auth_type
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {
        if (is_null($auth_type)) {
            array_push($this->openAPINullablesSetToNull, 'auth_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auth_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && !in_array($auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_type', must be one of '%s'",
                    $auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \Hookdeck\Model\SourceConfigWebhookAuth|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \Hookdeck\Model\SourceConfigWebhookAuth|null $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        if (is_null($auth)) {
            array_push($this->openAPINullablesSetToNull, 'auth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auth'] = $auth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


