<?php
/**
 * Rule
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Model;

use \ArrayAccess;
use \Hookdeck\ObjectSerializer;

/**
 * Rule Class Doc Comment
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Rule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Rule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'strategy' => '\Hookdeck\Model\RetryStrategy',
        'interval' => 'int',
        'count' => 'int',
        'response_status_codes' => 'string[]',
        'headers' => '\Hookdeck\Model\FilterRuleProperty',
        'body' => '\Hookdeck\Model\FilterRuleProperty',
        'query' => '\Hookdeck\Model\FilterRuleProperty',
        'path' => '\Hookdeck\Model\FilterRuleProperty',
        'transformation_id' => 'string',
        'transformation' => '\Hookdeck\Model\TransformRuleTransformation',
        'delay' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'strategy' => null,
        'interval' => null,
        'count' => null,
        'response_status_codes' => null,
        'headers' => null,
        'body' => null,
        'query' => null,
        'path' => null,
        'transformation_id' => null,
        'transformation' => null,
        'delay' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'strategy' => false,
        'interval' => true,
        'count' => true,
        'response_status_codes' => true,
        'headers' => true,
        'body' => true,
        'query' => true,
        'path' => true,
        'transformation_id' => true,
        'transformation' => false,
        'delay' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'strategy' => 'strategy',
        'interval' => 'interval',
        'count' => 'count',
        'response_status_codes' => 'response_status_codes',
        'headers' => 'headers',
        'body' => 'body',
        'query' => 'query',
        'path' => 'path',
        'transformation_id' => 'transformation_id',
        'transformation' => 'transformation',
        'delay' => 'delay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'strategy' => 'setStrategy',
        'interval' => 'setInterval',
        'count' => 'setCount',
        'response_status_codes' => 'setResponseStatusCodes',
        'headers' => 'setHeaders',
        'body' => 'setBody',
        'query' => 'setQuery',
        'path' => 'setPath',
        'transformation_id' => 'setTransformationId',
        'transformation' => 'setTransformation',
        'delay' => 'setDelay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'strategy' => 'getStrategy',
        'interval' => 'getInterval',
        'count' => 'getCount',
        'response_status_codes' => 'getResponseStatusCodes',
        'headers' => 'getHeaders',
        'body' => 'getBody',
        'query' => 'getQuery',
        'path' => 'getPath',
        'transformation_id' => 'getTransformationId',
        'transformation' => 'getTransformation',
        'delay' => 'getDelay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_RETRY = 'retry';
    public const TYPE_FILTER = 'filter';
    public const TYPE_TRANSFORM = 'transform';
    public const TYPE_DELAY = 'delay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_RETRY,
            self::TYPE_FILTER,
            self::TYPE_TRANSFORM,
            self::TYPE_DELAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('response_status_codes', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('transformation_id', $data ?? [], null);
        $this->setIfExists('transformation', $data ?? [], null);
        $this->setIfExists('delay', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['strategy'] === null) {
            $invalidProperties[] = "'strategy' can't be null";
        }
        if (!is_null($this->container['response_status_codes']) && (count($this->container['response_status_codes']) > 10)) {
            $invalidProperties[] = "invalid value for 'response_status_codes', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['response_status_codes']) && (count($this->container['response_status_codes']) < 1)) {
            $invalidProperties[] = "invalid value for 'response_status_codes', number of items must be greater than or equal to 1.";
        }

        if ($this->container['delay'] === null) {
            $invalidProperties[] = "'delay' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type A retry rule must be of type `retry`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return \Hookdeck\Model\RetryStrategy
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param \Hookdeck\Model\RetryStrategy $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval Time in MS between each retry
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            array_push($this->openAPINullablesSetToNull, 'interval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int|null $count Maximum number of retries to attempt
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            array_push($this->openAPINullablesSetToNull, 'count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets response_status_codes
     *
     * @return string[]|null
     */
    public function getResponseStatusCodes()
    {
        return $this->container['response_status_codes'];
    }

    /**
     * Sets response_status_codes
     *
     * @param string[]|null $response_status_codes HTTP codes to retry on. Accepts: range expressions (e.g., \"400-499\", \">400\"), specific codes (e.g., 404), and exclusions (e.g., \"!401\"). Example: [\"500-599\", \">400\", 404, \"!401\"]
     *
     * @return self
     */
    public function setResponseStatusCodes($response_status_codes)
    {
        if (is_null($response_status_codes)) {
            array_push($this->openAPINullablesSetToNull, 'response_status_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_status_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($response_status_codes) && (count($response_status_codes) > 10)) {
            throw new \InvalidArgumentException('invalid value for $response_status_codes when calling Rule., number of items must be less than or equal to 10.');
        }
        if (!is_null($response_status_codes) && (count($response_status_codes) < 1)) {
            throw new \InvalidArgumentException('invalid length for $response_status_codes when calling Rule., number of items must be greater than or equal to 1.');
        }
        $this->container['response_status_codes'] = $response_status_codes;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Hookdeck\Model\FilterRuleProperty|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Hookdeck\Model\FilterRuleProperty|null $headers headers
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        if (is_null($headers)) {
            array_push($this->openAPINullablesSetToNull, 'headers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('headers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets body
     *
     * @return \Hookdeck\Model\FilterRuleProperty|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Hookdeck\Model\FilterRuleProperty|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \Hookdeck\Model\FilterRuleProperty|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \Hookdeck\Model\FilterRuleProperty|null $query query
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            array_push($this->openAPINullablesSetToNull, 'query');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('query', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets path
     *
     * @return \Hookdeck\Model\FilterRuleProperty|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param \Hookdeck\Model\FilterRuleProperty|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets transformation_id
     *
     * @return string|null
     */
    public function getTransformationId()
    {
        return $this->container['transformation_id'];
    }

    /**
     * Sets transformation_id
     *
     * @param string|null $transformation_id ID of the attached transformation object. Optional input, always set once the rule is defined
     *
     * @return self
     */
    public function setTransformationId($transformation_id)
    {
        if (is_null($transformation_id)) {
            array_push($this->openAPINullablesSetToNull, 'transformation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transformation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transformation_id'] = $transformation_id;

        return $this;
    }

    /**
     * Gets transformation
     *
     * @return \Hookdeck\Model\TransformRuleTransformation|null
     */
    public function getTransformation()
    {
        return $this->container['transformation'];
    }

    /**
     * Sets transformation
     *
     * @param \Hookdeck\Model\TransformRuleTransformation|null $transformation transformation
     *
     * @return self
     */
    public function setTransformation($transformation)
    {
        if (is_null($transformation)) {
            throw new \InvalidArgumentException('non-nullable transformation cannot be null');
        }
        $this->container['transformation'] = $transformation;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return int
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param int $delay Delay to introduce in MS
     *
     * @return self
     */
    public function setDelay($delay)
    {
        if (is_null($delay)) {
            throw new \InvalidArgumentException('non-nullable delay cannot be null');
        }
        $this->container['delay'] = $delay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


