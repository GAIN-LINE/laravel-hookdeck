<?php
/**
 * ConnectionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Hookdeck\ApiException;
use Hookdeck\Configuration;
use Hookdeck\FormDataProcessor;
use Hookdeck\HeaderSelector;
use Hookdeck\ObjectSerializer;

/**
 * ConnectionsApi Class Doc Comment
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'countConnections' => [
            'application/json',
        ],
        'createConnection' => [
            'application/json',
        ],
        'deleteConnection' => [
            'application/json',
        ],
        'disableConnection' => [
            'application/json',
        ],
        'disableConnectionArchive' => [
            'application/json',
        ],
        'enableConnection' => [
            'application/json',
        ],
        'enableConnectionUnarchive' => [
            'application/json',
        ],
        'getConnection' => [
            'application/json',
        ],
        'getConnections' => [
            'application/json',
        ],
        'pauseConnection' => [
            'application/json',
        ],
        'unpauseConnection' => [
            'application/json',
        ],
        'updateConnection' => [
            'application/json',
        ],
        'upsertConnection' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation countConnections
     *
     * Count connections
     *
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id source_id (optional)
     * @param  bool|null $disabled disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at disabled_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at paused_at (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countConnections'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\CountConnections200Response|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function countConnections($destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $paused_at = null, string $contentType = self::contentTypes['countConnections'][0])
    {
        list($response) = $this->countConnectionsWithHttpInfo($destination_id, $source_id, $disabled, $disabled_at, $paused_at, $contentType);
        return $response;
    }

    /**
     * Operation countConnectionsWithHttpInfo
     *
     * Count connections
     *
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countConnections'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\CountConnections200Response|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function countConnectionsWithHttpInfo($destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $paused_at = null, string $contentType = self::contentTypes['countConnections'][0])
    {
        $request = $this->countConnectionsRequest($destination_id, $source_id, $disabled, $disabled_at, $paused_at, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\CountConnections200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\CountConnections200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\CountConnections200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation countConnectionsAsync
     *
     * Count connections
     *
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countConnections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countConnectionsAsync($destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $paused_at = null, string $contentType = self::contentTypes['countConnections'][0])
    {
        return $this->countConnectionsAsyncWithHttpInfo($destination_id, $source_id, $disabled, $disabled_at, $paused_at, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countConnectionsAsyncWithHttpInfo
     *
     * Count connections
     *
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countConnections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countConnectionsAsyncWithHttpInfo($destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $paused_at = null, string $contentType = self::contentTypes['countConnections'][0])
    {
        $returnType = '\Hookdeck\Model\CountConnections200Response';
        $request = $this->countConnectionsRequest($destination_id, $source_id, $disabled, $disabled_at, $paused_at, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countConnections'
     *
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countConnections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function countConnectionsRequest($destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $paused_at = null, string $contentType = self::contentTypes['countConnections'][0])
    {







        $resourcePath = '/connections/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destination_id,
            'destination_id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_id,
            'source_id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disabled,
            'disabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disabled_at,
            'disabled_at', // param base name
            'anyOf&lt;DateTime,Operators&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paused_at,
            'paused_at', // param base name
            'anyOf&lt;DateTime,Operators&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createConnection
     *
     * Create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function createConnection($upsert_connection_request, string $contentType = self::contentTypes['createConnection'][0])
    {
        list($response) = $this->createConnectionWithHttpInfo($upsert_connection_request, $contentType);
        return $response;
    }

    /**
     * Operation createConnectionWithHttpInfo
     *
     * Create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConnectionWithHttpInfo($upsert_connection_request, string $contentType = self::contentTypes['createConnection'][0])
    {
        $request = $this->createConnectionRequest($upsert_connection_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createConnectionAsync
     *
     * Create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConnectionAsync($upsert_connection_request, string $contentType = self::contentTypes['createConnection'][0])
    {
        return $this->createConnectionAsyncWithHttpInfo($upsert_connection_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConnectionAsyncWithHttpInfo
     *
     * Create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConnectionAsyncWithHttpInfo($upsert_connection_request, string $contentType = self::contentTypes['createConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->createConnectionRequest($upsert_connection_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConnection'
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createConnectionRequest($upsert_connection_request, string $contentType = self::contentTypes['createConnection'][0])
    {

        // verify the required parameter 'upsert_connection_request' is set
        if ($upsert_connection_request === null || (is_array($upsert_connection_request) && count($upsert_connection_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upsert_connection_request when calling createConnection'
            );
        }


        $resourcePath = '/connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upsert_connection_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upsert_connection_request));
            } else {
                $httpBody = $upsert_connection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConnection
     *
     * Delete a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\DeleteConnection200Response|\Hookdeck\Model\APIErrorResponse
     */
    public function deleteConnection($id, string $contentType = self::contentTypes['deleteConnection'][0])
    {
        list($response) = $this->deleteConnectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation deleteConnectionWithHttpInfo
     *
     * Delete a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\DeleteConnection200Response|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConnectionWithHttpInfo($id, string $contentType = self::contentTypes['deleteConnection'][0])
    {
        $request = $this->deleteConnectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\DeleteConnection200Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\DeleteConnection200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\DeleteConnection200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteConnectionAsync
     *
     * Delete a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConnectionAsync($id, string $contentType = self::contentTypes['deleteConnection'][0])
    {
        return $this->deleteConnectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConnectionAsyncWithHttpInfo
     *
     * Delete a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConnectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteConnection'][0])
    {
        $returnType = '\Hookdeck\Model\DeleteConnection200Response';
        $request = $this->deleteConnectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConnection'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteConnectionRequest($id, string $contentType = self::contentTypes['deleteConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteConnection'
            );
        }


        $resourcePath = '/connections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableConnection
     *
     * Disable a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse
     */
    public function disableConnection($id, string $contentType = self::contentTypes['disableConnection'][0])
    {
        list($response) = $this->disableConnectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation disableConnectionWithHttpInfo
     *
     * Disable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableConnectionWithHttpInfo($id, string $contentType = self::contentTypes['disableConnection'][0])
    {
        $request = $this->disableConnectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation disableConnectionAsync
     *
     * Disable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableConnectionAsync($id, string $contentType = self::contentTypes['disableConnection'][0])
    {
        return $this->disableConnectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableConnectionAsyncWithHttpInfo
     *
     * Disable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableConnectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['disableConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->disableConnectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableConnection'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableConnectionRequest($id, string $contentType = self::contentTypes['disableConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling disableConnection'
            );
        }


        $resourcePath = '/connections/{id}/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableConnectionArchive
     *
     * Disable a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnectionArchive'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse
     */
    public function disableConnectionArchive($id, string $contentType = self::contentTypes['disableConnectionArchive'][0])
    {
        list($response) = $this->disableConnectionArchiveWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation disableConnectionArchiveWithHttpInfo
     *
     * Disable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnectionArchive'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableConnectionArchiveWithHttpInfo($id, string $contentType = self::contentTypes['disableConnectionArchive'][0])
    {
        $request = $this->disableConnectionArchiveRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation disableConnectionArchiveAsync
     *
     * Disable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnectionArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableConnectionArchiveAsync($id, string $contentType = self::contentTypes['disableConnectionArchive'][0])
    {
        return $this->disableConnectionArchiveAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableConnectionArchiveAsyncWithHttpInfo
     *
     * Disable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnectionArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableConnectionArchiveAsyncWithHttpInfo($id, string $contentType = self::contentTypes['disableConnectionArchive'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->disableConnectionArchiveRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableConnectionArchive'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableConnectionArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableConnectionArchiveRequest($id, string $contentType = self::contentTypes['disableConnectionArchive'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling disableConnectionArchive'
            );
        }


        $resourcePath = '/connections/{id}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enableConnection
     *
     * Enable a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse
     */
    public function enableConnection($id, string $contentType = self::contentTypes['enableConnection'][0])
    {
        list($response) = $this->enableConnectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation enableConnectionWithHttpInfo
     *
     * Enable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enableConnectionWithHttpInfo($id, string $contentType = self::contentTypes['enableConnection'][0])
    {
        $request = $this->enableConnectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation enableConnectionAsync
     *
     * Enable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableConnectionAsync($id, string $contentType = self::contentTypes['enableConnection'][0])
    {
        return $this->enableConnectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enableConnectionAsyncWithHttpInfo
     *
     * Enable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableConnectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['enableConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->enableConnectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enableConnection'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enableConnectionRequest($id, string $contentType = self::contentTypes['enableConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling enableConnection'
            );
        }


        $resourcePath = '/connections/{id}/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enableConnectionUnarchive
     *
     * Enable a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnectionUnarchive'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse
     */
    public function enableConnectionUnarchive($id, string $contentType = self::contentTypes['enableConnectionUnarchive'][0])
    {
        list($response) = $this->enableConnectionUnarchiveWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation enableConnectionUnarchiveWithHttpInfo
     *
     * Enable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnectionUnarchive'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enableConnectionUnarchiveWithHttpInfo($id, string $contentType = self::contentTypes['enableConnectionUnarchive'][0])
    {
        $request = $this->enableConnectionUnarchiveRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation enableConnectionUnarchiveAsync
     *
     * Enable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnectionUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableConnectionUnarchiveAsync($id, string $contentType = self::contentTypes['enableConnectionUnarchive'][0])
    {
        return $this->enableConnectionUnarchiveAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enableConnectionUnarchiveAsyncWithHttpInfo
     *
     * Enable a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnectionUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableConnectionUnarchiveAsyncWithHttpInfo($id, string $contentType = self::contentTypes['enableConnectionUnarchive'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->enableConnectionUnarchiveRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enableConnectionUnarchive'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableConnectionUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enableConnectionUnarchiveRequest($id, string $contentType = self::contentTypes['enableConnectionUnarchive'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling enableConnectionUnarchive'
            );
        }


        $resourcePath = '/connections/{id}/unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnection
     *
     * Get a single connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function getConnection($id, string $contentType = self::contentTypes['getConnection'][0])
    {
        list($response) = $this->getConnectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getConnectionWithHttpInfo
     *
     * Get a single connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectionWithHttpInfo($id, string $contentType = self::contentTypes['getConnection'][0])
    {
        $request = $this->getConnectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 410:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getConnectionAsync
     *
     * Get a single connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionAsync($id, string $contentType = self::contentTypes['getConnection'][0])
    {
        return $this->getConnectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectionAsyncWithHttpInfo
     *
     * Get a single connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->getConnectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnection'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConnectionRequest($id, string $contentType = self::contentTypes['getConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConnection'
            );
        }


        $resourcePath = '/connections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnections
     *
     * Get connections
     *
     * @param  \Hookdeck\Model\GetConnectionsIdParameter|null $id id (optional)
     * @param  \Hookdeck\Model\GetConnectionsNameParameter|null $name name (optional)
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id source_id (optional)
     * @param  bool|null $disabled disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at disabled_at (optional)
     * @param  string|null $full_name full_name (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at paused_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsOrderByParameter|null $order_by order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir dir (optional)
     * @param  int|null $limit limit (optional)
     * @param  string|null $next next (optional)
     * @param  string|null $prev prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnections'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\ConnectionPaginatedResult|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function getConnections($id = null, $name = null, $destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $full_name = null, $paused_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getConnections'][0])
    {
        list($response) = $this->getConnectionsWithHttpInfo($id, $name, $destination_id, $source_id, $disabled, $disabled_at, $full_name, $paused_at, $order_by, $dir, $limit, $next, $prev, $contentType);
        return $response;
    }

    /**
     * Operation getConnectionsWithHttpInfo
     *
     * Get connections
     *
     * @param  \Hookdeck\Model\GetConnectionsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetConnectionsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  string|null $full_name (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnections'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\ConnectionPaginatedResult|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectionsWithHttpInfo($id = null, $name = null, $destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $full_name = null, $paused_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getConnections'][0])
    {
        $request = $this->getConnectionsRequest($id, $name, $destination_id, $source_id, $disabled, $disabled_at, $full_name, $paused_at, $order_by, $dir, $limit, $next, $prev, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\ConnectionPaginatedResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\ConnectionPaginatedResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\ConnectionPaginatedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getConnectionsAsync
     *
     * Get connections
     *
     * @param  \Hookdeck\Model\GetConnectionsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetConnectionsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  string|null $full_name (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionsAsync($id = null, $name = null, $destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $full_name = null, $paused_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getConnections'][0])
    {
        return $this->getConnectionsAsyncWithHttpInfo($id, $name, $destination_id, $source_id, $disabled, $disabled_at, $full_name, $paused_at, $order_by, $dir, $limit, $next, $prev, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectionsAsyncWithHttpInfo
     *
     * Get connections
     *
     * @param  \Hookdeck\Model\GetConnectionsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetConnectionsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  string|null $full_name (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionsAsyncWithHttpInfo($id = null, $name = null, $destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $full_name = null, $paused_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getConnections'][0])
    {
        $returnType = '\Hookdeck\Model\ConnectionPaginatedResult';
        $request = $this->getConnectionsRequest($id, $name, $destination_id, $source_id, $disabled, $disabled_at, $full_name, $paused_at, $order_by, $dir, $limit, $next, $prev, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnections'
     *
     * @param  \Hookdeck\Model\GetConnectionsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetConnectionsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetConnectionsDestinationIdParameter|null $destination_id (optional)
     * @param  \Hookdeck\Model\GetConnectionsSourceIdParameter|null $source_id (optional)
     * @param  bool|null $disabled (optional)
     * @param  \Hookdeck\Model\GetConnectionsDisabledAtParameter|null $disabled_at (optional)
     * @param  string|null $full_name (optional)
     * @param  \Hookdeck\Model\GetConnectionsPausedAtParameter|null $paused_at (optional)
     * @param  \Hookdeck\Model\GetConnectionsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConnectionsRequest($id = null, $name = null, $destination_id = null, $source_id = null, $disabled = null, $disabled_at = null, $full_name = null, $paused_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getConnections'][0])
    {







        if ($full_name !== null && strlen($full_name) > 155) {
            throw new \InvalidArgumentException('invalid length for "$full_name" when calling ConnectionsApi.getConnections, must be smaller than or equal to 155.');
        }
        if ($full_name !== null && !preg_match("/^[a-z0-9-_>\\s]+$/", $full_name)) {
            throw new \InvalidArgumentException("invalid value for \"full_name\" when calling ConnectionsApi.getConnections, must conform to the pattern /^[a-z0-9-_>\\s]+$/.");
        }




        if ($limit !== null && $limit > 255) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ConnectionsApi.getConnections, must be smaller than or equal to 255.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ConnectionsApi.getConnections, must be bigger than or equal to 0.');
        }

        if ($next !== null && strlen($next) > 255) {
            throw new \InvalidArgumentException('invalid length for "$next" when calling ConnectionsApi.getConnections, must be smaller than or equal to 255.');
        }

        if ($prev !== null && strlen($prev) > 255) {
            throw new \InvalidArgumentException('invalid length for "$prev" when calling ConnectionsApi.getConnections, must be smaller than or equal to 255.');
        }


        $resourcePath = '/connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'anyOf&lt;string,Operators,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destination_id,
            'destination_id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_id,
            'source_id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disabled,
            'disabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disabled_at,
            'disabled_at', // param base name
            'anyOf&lt;DateTime,Operators&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $full_name,
            'full_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paused_at,
            'paused_at', // param base name
            'anyOf&lt;DateTime,Operators&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dir,
            'dir', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next,
            'next', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prev,
            'prev', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pauseConnection
     *
     * Pause a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse
     */
    public function pauseConnection($id, string $contentType = self::contentTypes['pauseConnection'][0])
    {
        list($response) = $this->pauseConnectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation pauseConnectionWithHttpInfo
     *
     * Pause a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pauseConnectionWithHttpInfo($id, string $contentType = self::contentTypes['pauseConnection'][0])
    {
        $request = $this->pauseConnectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation pauseConnectionAsync
     *
     * Pause a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseConnectionAsync($id, string $contentType = self::contentTypes['pauseConnection'][0])
    {
        return $this->pauseConnectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pauseConnectionAsyncWithHttpInfo
     *
     * Pause a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseConnectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['pauseConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->pauseConnectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pauseConnection'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pauseConnectionRequest($id, string $contentType = self::contentTypes['pauseConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pauseConnection'
            );
        }


        $resourcePath = '/connections/{id}/pause';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unpauseConnection
     *
     * Unpause a connection
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unpauseConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse
     */
    public function unpauseConnection($id, string $contentType = self::contentTypes['unpauseConnection'][0])
    {
        list($response) = $this->unpauseConnectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation unpauseConnectionWithHttpInfo
     *
     * Unpause a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unpauseConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unpauseConnectionWithHttpInfo($id, string $contentType = self::contentTypes['unpauseConnection'][0])
    {
        $request = $this->unpauseConnectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation unpauseConnectionAsync
     *
     * Unpause a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unpauseConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unpauseConnectionAsync($id, string $contentType = self::contentTypes['unpauseConnection'][0])
    {
        return $this->unpauseConnectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unpauseConnectionAsyncWithHttpInfo
     *
     * Unpause a connection
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unpauseConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unpauseConnectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['unpauseConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->unpauseConnectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unpauseConnection'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unpauseConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unpauseConnectionRequest($id, string $contentType = self::contentTypes['unpauseConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unpauseConnection'
            );
        }


        $resourcePath = '/connections/{id}/unpause';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateConnection
     *
     * Update a connection
     *
     * @param  string $id id (required)
     * @param  \Hookdeck\Model\UpdateConnectionRequest $update_connection_request update_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function updateConnection($id, $update_connection_request, string $contentType = self::contentTypes['updateConnection'][0])
    {
        list($response) = $this->updateConnectionWithHttpInfo($id, $update_connection_request, $contentType);
        return $response;
    }

    /**
     * Operation updateConnectionWithHttpInfo
     *
     * Update a connection
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateConnectionRequest $update_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConnectionWithHttpInfo($id, $update_connection_request, string $contentType = self::contentTypes['updateConnection'][0])
    {
        $request = $this->updateConnectionRequest($id, $update_connection_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation updateConnectionAsync
     *
     * Update a connection
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateConnectionRequest $update_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConnectionAsync($id, $update_connection_request, string $contentType = self::contentTypes['updateConnection'][0])
    {
        return $this->updateConnectionAsyncWithHttpInfo($id, $update_connection_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConnectionAsyncWithHttpInfo
     *
     * Update a connection
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateConnectionRequest $update_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConnectionAsyncWithHttpInfo($id, $update_connection_request, string $contentType = self::contentTypes['updateConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->updateConnectionRequest($id, $update_connection_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateConnection'
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateConnectionRequest $update_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateConnectionRequest($id, $update_connection_request, string $contentType = self::contentTypes['updateConnection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateConnection'
            );
        }

        // verify the required parameter 'update_connection_request' is set
        if ($update_connection_request === null || (is_array($update_connection_request) && count($update_connection_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_connection_request when calling updateConnection'
            );
        }


        $resourcePath = '/connections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_connection_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_connection_request));
            } else {
                $httpBody = $update_connection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertConnection
     *
     * Update or create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function upsertConnection($upsert_connection_request, string $contentType = self::contentTypes['upsertConnection'][0])
    {
        list($response) = $this->upsertConnectionWithHttpInfo($upsert_connection_request, $contentType);
        return $response;
    }

    /**
     * Operation upsertConnectionWithHttpInfo
     *
     * Update or create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertConnection'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Connection|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertConnectionWithHttpInfo($upsert_connection_request, string $contentType = self::contentTypes['upsertConnection'][0])
    {
        $request = $this->upsertConnectionRequest($upsert_connection_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Connection',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation upsertConnectionAsync
     *
     * Update or create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertConnectionAsync($upsert_connection_request, string $contentType = self::contentTypes['upsertConnection'][0])
    {
        return $this->upsertConnectionAsyncWithHttpInfo($upsert_connection_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertConnectionAsyncWithHttpInfo
     *
     * Update or create a connection
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertConnectionAsyncWithHttpInfo($upsert_connection_request, string $contentType = self::contentTypes['upsertConnection'][0])
    {
        $returnType = '\Hookdeck\Model\Connection';
        $request = $this->upsertConnectionRequest($upsert_connection_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertConnection'
     *
     * @param  \Hookdeck\Model\UpsertConnectionRequest $upsert_connection_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upsertConnectionRequest($upsert_connection_request, string $contentType = self::contentTypes['upsertConnection'][0])
    {

        // verify the required parameter 'upsert_connection_request' is set
        if ($upsert_connection_request === null || (is_array($upsert_connection_request) && count($upsert_connection_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upsert_connection_request when calling upsertConnection'
            );
        }


        $resourcePath = '/connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upsert_connection_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upsert_connection_request));
            } else {
                $httpBody = $upsert_connection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];


        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
