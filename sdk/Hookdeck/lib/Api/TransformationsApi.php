<?php
/**
 * TransformationsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hookdeck Admin REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@hookdeck.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Hookdeck\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Hookdeck\ApiException;
use Hookdeck\Configuration;
use Hookdeck\FormDataProcessor;
use Hookdeck\HeaderSelector;
use Hookdeck\ObjectSerializer;

/**
 * TransformationsApi Class Doc Comment
 *
 * @category Class
 * @package  Hookdeck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransformationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createTransformation' => [
            'application/json',
        ],
        'deleteTransformation' => [
            'application/json',
        ],
        'getTransformation' => [
            'application/json',
        ],
        'getTransformationExecution' => [
            'application/json',
        ],
        'getTransformationExecutions' => [
            'application/json',
        ],
        'getTransformations' => [
            'application/json',
        ],
        'testTransformation' => [
            'application/json',
        ],
        'updateTransformation' => [
            'application/json',
        ],
        'upsertTransformation' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createTransformation
     *
     * Create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function createTransformation($upsert_transformation_request, string $contentType = self::contentTypes['createTransformation'][0])
    {
        list($response) = $this->createTransformationWithHttpInfo($upsert_transformation_request, $contentType);
        return $response;
    }

    /**
     * Operation createTransformationWithHttpInfo
     *
     * Create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTransformationWithHttpInfo($upsert_transformation_request, string $contentType = self::contentTypes['createTransformation'][0])
    {
        $request = $this->createTransformationRequest($upsert_transformation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Transformation',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Transformation',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Transformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createTransformationAsync
     *
     * Create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransformationAsync($upsert_transformation_request, string $contentType = self::contentTypes['createTransformation'][0])
    {
        return $this->createTransformationAsyncWithHttpInfo($upsert_transformation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTransformationAsyncWithHttpInfo
     *
     * Create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransformationAsyncWithHttpInfo($upsert_transformation_request, string $contentType = self::contentTypes['createTransformation'][0])
    {
        $returnType = '\Hookdeck\Model\Transformation';
        $request = $this->createTransformationRequest($upsert_transformation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTransformation'
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTransformationRequest($upsert_transformation_request, string $contentType = self::contentTypes['createTransformation'][0])
    {

        // verify the required parameter 'upsert_transformation_request' is set
        if ($upsert_transformation_request === null || (is_array($upsert_transformation_request) && count($upsert_transformation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upsert_transformation_request when calling createTransformation'
            );
        }


        $resourcePath = '/transformations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upsert_transformation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upsert_transformation_request));
            } else {
                $httpBody = $upsert_transformation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTransformation
     *
     * Delete a transformation
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\DeleteTransformation200Response|\Hookdeck\Model\APIErrorResponse
     */
    public function deleteTransformation($id, string $contentType = self::contentTypes['deleteTransformation'][0])
    {
        list($response) = $this->deleteTransformationWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation deleteTransformationWithHttpInfo
     *
     * Delete a transformation
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\DeleteTransformation200Response|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTransformationWithHttpInfo($id, string $contentType = self::contentTypes['deleteTransformation'][0])
    {
        $request = $this->deleteTransformationRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\DeleteTransformation200Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\DeleteTransformation200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\DeleteTransformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTransformationAsync
     *
     * Delete a transformation
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransformationAsync($id, string $contentType = self::contentTypes['deleteTransformation'][0])
    {
        return $this->deleteTransformationAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTransformationAsyncWithHttpInfo
     *
     * Delete a transformation
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransformationAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteTransformation'][0])
    {
        $returnType = '\Hookdeck\Model\DeleteTransformation200Response';
        $request = $this->deleteTransformationRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTransformation'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTransformationRequest($id, string $contentType = self::contentTypes['deleteTransformation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteTransformation'
            );
        }


        $resourcePath = '/transformations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransformation
     *
     * Get a transformation
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse
     */
    public function getTransformation($id, string $contentType = self::contentTypes['getTransformation'][0])
    {
        list($response) = $this->getTransformationWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getTransformationWithHttpInfo
     *
     * Get a transformation
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransformationWithHttpInfo($id, string $contentType = self::contentTypes['getTransformation'][0])
    {
        $request = $this->getTransformationRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Transformation',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Transformation',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Transformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransformationAsync
     *
     * Get a transformation
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationAsync($id, string $contentType = self::contentTypes['getTransformation'][0])
    {
        return $this->getTransformationAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransformationAsyncWithHttpInfo
     *
     * Get a transformation
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getTransformation'][0])
    {
        $returnType = '\Hookdeck\Model\Transformation';
        $request = $this->getTransformationRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransformation'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransformationRequest($id, string $contentType = self::contentTypes['getTransformation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTransformation'
            );
        }


        $resourcePath = '/transformations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransformationExecution
     *
     * Get a transformation execution
     *
     * @param  string $id id (required)
     * @param  string $execution_id execution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecution'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\TransformationExecution|\Hookdeck\Model\APIErrorResponse
     */
    public function getTransformationExecution($id, $execution_id, string $contentType = self::contentTypes['getTransformationExecution'][0])
    {
        list($response) = $this->getTransformationExecutionWithHttpInfo($id, $execution_id, $contentType);
        return $response;
    }

    /**
     * Operation getTransformationExecutionWithHttpInfo
     *
     * Get a transformation execution
     *
     * @param  string $id (required)
     * @param  string $execution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecution'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\TransformationExecution|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransformationExecutionWithHttpInfo($id, $execution_id, string $contentType = self::contentTypes['getTransformationExecution'][0])
    {
        $request = $this->getTransformationExecutionRequest($id, $execution_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\TransformationExecution',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\TransformationExecution',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\TransformationExecution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransformationExecutionAsync
     *
     * Get a transformation execution
     *
     * @param  string $id (required)
     * @param  string $execution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationExecutionAsync($id, $execution_id, string $contentType = self::contentTypes['getTransformationExecution'][0])
    {
        return $this->getTransformationExecutionAsyncWithHttpInfo($id, $execution_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransformationExecutionAsyncWithHttpInfo
     *
     * Get a transformation execution
     *
     * @param  string $id (required)
     * @param  string $execution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationExecutionAsyncWithHttpInfo($id, $execution_id, string $contentType = self::contentTypes['getTransformationExecution'][0])
    {
        $returnType = '\Hookdeck\Model\TransformationExecution';
        $request = $this->getTransformationExecutionRequest($id, $execution_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransformationExecution'
     *
     * @param  string $id (required)
     * @param  string $execution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransformationExecutionRequest($id, $execution_id, string $contentType = self::contentTypes['getTransformationExecution'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTransformationExecution'
            );
        }

        // verify the required parameter 'execution_id' is set
        if ($execution_id === null || (is_array($execution_id) && count($execution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $execution_id when calling getTransformationExecution'
            );
        }


        $resourcePath = '/transformations/{id}/executions/{execution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'execution_id' . '}',
                ObjectSerializer::toPathValue($execution_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransformationExecutions
     *
     * Get transformation executions
     *
     * @param  string $id id (required)
     * @param  \Hookdeck\Model\GetTransformationExecutionsLogLevelParameter|null $log_level log_level (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsWebhookIdParameter|null $webhook_id webhook_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsIssueIdParameter|null $issue_id issue_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsCreatedAtParameter|null $created_at created_at (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir dir (optional)
     * @param  int|null $limit limit (optional)
     * @param  string|null $next next (optional)
     * @param  string|null $prev prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecutions'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\TransformationExecutionPaginatedResult|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function getTransformationExecutions($id, $log_level = null, $webhook_id = null, $issue_id = null, $created_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformationExecutions'][0])
    {
        list($response) = $this->getTransformationExecutionsWithHttpInfo($id, $log_level, $webhook_id, $issue_id, $created_at, $order_by, $dir, $limit, $next, $prev, $contentType);
        return $response;
    }

    /**
     * Operation getTransformationExecutionsWithHttpInfo
     *
     * Get transformation executions
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\GetTransformationExecutionsLogLevelParameter|null $log_level (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsWebhookIdParameter|null $webhook_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsIssueIdParameter|null $issue_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsCreatedAtParameter|null $created_at (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecutions'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\TransformationExecutionPaginatedResult|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransformationExecutionsWithHttpInfo($id, $log_level = null, $webhook_id = null, $issue_id = null, $created_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformationExecutions'][0])
    {
        $request = $this->getTransformationExecutionsRequest($id, $log_level, $webhook_id, $issue_id, $created_at, $order_by, $dir, $limit, $next, $prev, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\TransformationExecutionPaginatedResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\TransformationExecutionPaginatedResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\TransformationExecutionPaginatedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransformationExecutionsAsync
     *
     * Get transformation executions
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\GetTransformationExecutionsLogLevelParameter|null $log_level (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsWebhookIdParameter|null $webhook_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsIssueIdParameter|null $issue_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsCreatedAtParameter|null $created_at (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationExecutionsAsync($id, $log_level = null, $webhook_id = null, $issue_id = null, $created_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformationExecutions'][0])
    {
        return $this->getTransformationExecutionsAsyncWithHttpInfo($id, $log_level, $webhook_id, $issue_id, $created_at, $order_by, $dir, $limit, $next, $prev, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransformationExecutionsAsyncWithHttpInfo
     *
     * Get transformation executions
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\GetTransformationExecutionsLogLevelParameter|null $log_level (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsWebhookIdParameter|null $webhook_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsIssueIdParameter|null $issue_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsCreatedAtParameter|null $created_at (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationExecutionsAsyncWithHttpInfo($id, $log_level = null, $webhook_id = null, $issue_id = null, $created_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformationExecutions'][0])
    {
        $returnType = '\Hookdeck\Model\TransformationExecutionPaginatedResult';
        $request = $this->getTransformationExecutionsRequest($id, $log_level, $webhook_id, $issue_id, $created_at, $order_by, $dir, $limit, $next, $prev, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransformationExecutions'
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\GetTransformationExecutionsLogLevelParameter|null $log_level (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsWebhookIdParameter|null $webhook_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsIssueIdParameter|null $issue_id (optional)
     * @param  \Hookdeck\Model\GetTransformationExecutionsCreatedAtParameter|null $created_at (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformationExecutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransformationExecutionsRequest($id, $log_level = null, $webhook_id = null, $issue_id = null, $created_at = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformationExecutions'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTransformationExecutions'
            );
        }







        if ($limit !== null && $limit > 255) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransformationsApi.getTransformationExecutions, must be smaller than or equal to 255.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransformationsApi.getTransformationExecutions, must be bigger than or equal to 0.');
        }
        
        if ($next !== null && strlen($next) > 255) {
            throw new \InvalidArgumentException('invalid length for "$next" when calling TransformationsApi.getTransformationExecutions, must be smaller than or equal to 255.');
        }
        
        if ($prev !== null && strlen($prev) > 255) {
            throw new \InvalidArgumentException('invalid length for "$prev" when calling TransformationsApi.getTransformationExecutions, must be smaller than or equal to 255.');
        }
        

        $resourcePath = '/transformations/{id}/executions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $log_level,
            'log_level', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webhook_id,
            'webhook_id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issue_id,
            'issue_id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at,
            'created_at', // param base name
            'anyOf&lt;DateTime,Operators&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dir,
            'dir', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next,
            'next', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prev,
            'prev', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransformations
     *
     * Get transformations
     *
     * @param  \Hookdeck\Model\GetTransformationsIdParameter|null $id id (optional)
     * @param  \Hookdeck\Model\GetTransformationsNameParameter|null $name name (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir dir (optional)
     * @param  int|null $limit limit (optional)
     * @param  string|null $next next (optional)
     * @param  string|null $prev prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformations'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\TransformationPaginatedResult|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function getTransformations($id = null, $name = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformations'][0])
    {
        list($response) = $this->getTransformationsWithHttpInfo($id, $name, $order_by, $dir, $limit, $next, $prev, $contentType);
        return $response;
    }

    /**
     * Operation getTransformationsWithHttpInfo
     *
     * Get transformations
     *
     * @param  \Hookdeck\Model\GetTransformationsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetTransformationsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformations'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\TransformationPaginatedResult|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransformationsWithHttpInfo($id = null, $name = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformations'][0])
    {
        $request = $this->getTransformationsRequest($id, $name, $order_by, $dir, $limit, $next, $prev, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\TransformationPaginatedResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\TransformationPaginatedResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\TransformationPaginatedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransformationsAsync
     *
     * Get transformations
     *
     * @param  \Hookdeck\Model\GetTransformationsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetTransformationsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationsAsync($id = null, $name = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformations'][0])
    {
        return $this->getTransformationsAsyncWithHttpInfo($id, $name, $order_by, $dir, $limit, $next, $prev, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransformationsAsyncWithHttpInfo
     *
     * Get transformations
     *
     * @param  \Hookdeck\Model\GetTransformationsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetTransformationsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransformationsAsyncWithHttpInfo($id = null, $name = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformations'][0])
    {
        $returnType = '\Hookdeck\Model\TransformationPaginatedResult';
        $request = $this->getTransformationsRequest($id, $name, $order_by, $dir, $limit, $next, $prev, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransformations'
     *
     * @param  \Hookdeck\Model\GetTransformationsIdParameter|null $id (optional)
     * @param  \Hookdeck\Model\GetTransformationsNameParameter|null $name (optional)
     * @param  \Hookdeck\Model\GetAttemptsOrderByParameter|null $order_by (optional)
     * @param  \Hookdeck\Model\GetIssueTriggersDirParameter|null $dir (optional)
     * @param  int|null $limit (optional)
     * @param  string|null $next (optional)
     * @param  string|null $prev (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransformations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransformationsRequest($id = null, $name = null, $order_by = null, $dir = null, $limit = null, $next = null, $prev = null, string $contentType = self::contentTypes['getTransformations'][0])
    {





        if ($limit !== null && $limit > 255) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransformationsApi.getTransformations, must be smaller than or equal to 255.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransformationsApi.getTransformations, must be bigger than or equal to 0.');
        }
        
        if ($next !== null && strlen($next) > 255) {
            throw new \InvalidArgumentException('invalid length for "$next" when calling TransformationsApi.getTransformations, must be smaller than or equal to 255.');
        }
        
        if ($prev !== null && strlen($prev) > 255) {
            throw new \InvalidArgumentException('invalid length for "$prev" when calling TransformationsApi.getTransformations, must be smaller than or equal to 255.');
        }
        

        $resourcePath = '/transformations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'anyOf&lt;string,Operators&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dir,
            'dir', // param base name
            'anyOf&lt;string,array&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next,
            'next', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prev,
            'prev', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testTransformation
     *
     * Test a transformation code
     *
     * @param  \Hookdeck\Model\TestTransformationRequest $test_transformation_request test_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\TransformationExecutorOutput|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function testTransformation($test_transformation_request, string $contentType = self::contentTypes['testTransformation'][0])
    {
        list($response) = $this->testTransformationWithHttpInfo($test_transformation_request, $contentType);
        return $response;
    }

    /**
     * Operation testTransformationWithHttpInfo
     *
     * Test a transformation code
     *
     * @param  \Hookdeck\Model\TestTransformationRequest $test_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\TransformationExecutorOutput|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function testTransformationWithHttpInfo($test_transformation_request, string $contentType = self::contentTypes['testTransformation'][0])
    {
        $request = $this->testTransformationRequest($test_transformation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\TransformationExecutorOutput',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\TransformationExecutorOutput',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\TransformationExecutorOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation testTransformationAsync
     *
     * Test a transformation code
     *
     * @param  \Hookdeck\Model\TestTransformationRequest $test_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testTransformationAsync($test_transformation_request, string $contentType = self::contentTypes['testTransformation'][0])
    {
        return $this->testTransformationAsyncWithHttpInfo($test_transformation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testTransformationAsyncWithHttpInfo
     *
     * Test a transformation code
     *
     * @param  \Hookdeck\Model\TestTransformationRequest $test_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testTransformationAsyncWithHttpInfo($test_transformation_request, string $contentType = self::contentTypes['testTransformation'][0])
    {
        $returnType = '\Hookdeck\Model\TransformationExecutorOutput';
        $request = $this->testTransformationRequest($test_transformation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testTransformation'
     *
     * @param  \Hookdeck\Model\TestTransformationRequest $test_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testTransformationRequest($test_transformation_request, string $contentType = self::contentTypes['testTransformation'][0])
    {

        // verify the required parameter 'test_transformation_request' is set
        if ($test_transformation_request === null || (is_array($test_transformation_request) && count($test_transformation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $test_transformation_request when calling testTransformation'
            );
        }


        $resourcePath = '/transformations/run';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($test_transformation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($test_transformation_request));
            } else {
                $httpBody = $test_transformation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransformation
     *
     * Update a transformation
     *
     * @param  string $id id (required)
     * @param  \Hookdeck\Model\UpdateTransformationRequest $update_transformation_request update_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function updateTransformation($id, $update_transformation_request, string $contentType = self::contentTypes['updateTransformation'][0])
    {
        list($response) = $this->updateTransformationWithHttpInfo($id, $update_transformation_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTransformationWithHttpInfo
     *
     * Update a transformation
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateTransformationRequest $update_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransformationWithHttpInfo($id, $update_transformation_request, string $contentType = self::contentTypes['updateTransformation'][0])
    {
        $request = $this->updateTransformationRequest($id, $update_transformation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Transformation',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Transformation',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Transformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTransformationAsync
     *
     * Update a transformation
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateTransformationRequest $update_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransformationAsync($id, $update_transformation_request, string $contentType = self::contentTypes['updateTransformation'][0])
    {
        return $this->updateTransformationAsyncWithHttpInfo($id, $update_transformation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransformationAsyncWithHttpInfo
     *
     * Update a transformation
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateTransformationRequest $update_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransformationAsyncWithHttpInfo($id, $update_transformation_request, string $contentType = self::contentTypes['updateTransformation'][0])
    {
        $returnType = '\Hookdeck\Model\Transformation';
        $request = $this->updateTransformationRequest($id, $update_transformation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransformation'
     *
     * @param  string $id (required)
     * @param  \Hookdeck\Model\UpdateTransformationRequest $update_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransformationRequest($id, $update_transformation_request, string $contentType = self::contentTypes['updateTransformation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateTransformation'
            );
        }

        // verify the required parameter 'update_transformation_request' is set
        if ($update_transformation_request === null || (is_array($update_transformation_request) && count($update_transformation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_transformation_request when calling updateTransformation'
            );
        }


        $resourcePath = '/transformations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_transformation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_transformation_request));
            } else {
                $httpBody = $update_transformation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertTransformation
     *
     * Update or create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse
     */
    public function upsertTransformation($upsert_transformation_request, string $contentType = self::contentTypes['upsertTransformation'][0])
    {
        list($response) = $this->upsertTransformationWithHttpInfo($upsert_transformation_request, $contentType);
        return $response;
    }

    /**
     * Operation upsertTransformationWithHttpInfo
     *
     * Update or create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertTransformation'] to see the possible values for this operation
     *
     * @throws \Hookdeck\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Hookdeck\Model\Transformation|\Hookdeck\Model\APIErrorResponse|\Hookdeck\Model\APIErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertTransformationWithHttpInfo($upsert_transformation_request, string $contentType = self::contentTypes['upsertTransformation'][0])
    {
        $request = $this->upsertTransformationRequest($upsert_transformation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\Transformation',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Hookdeck\Model\APIErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Hookdeck\Model\Transformation',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\Transformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hookdeck\Model\APIErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation upsertTransformationAsync
     *
     * Update or create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertTransformationAsync($upsert_transformation_request, string $contentType = self::contentTypes['upsertTransformation'][0])
    {
        return $this->upsertTransformationAsyncWithHttpInfo($upsert_transformation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertTransformationAsyncWithHttpInfo
     *
     * Update or create a transformation
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertTransformationAsyncWithHttpInfo($upsert_transformation_request, string $contentType = self::contentTypes['upsertTransformation'][0])
    {
        $returnType = '\Hookdeck\Model\Transformation';
        $request = $this->upsertTransformationRequest($upsert_transformation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertTransformation'
     *
     * @param  \Hookdeck\Model\UpsertTransformationRequest $upsert_transformation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upsertTransformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upsertTransformationRequest($upsert_transformation_request, string $contentType = self::contentTypes['upsertTransformation'][0])
    {

        // verify the required parameter 'upsert_transformation_request' is set
        if ($upsert_transformation_request === null || (is_array($upsert_transformation_request) && count($upsert_transformation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upsert_transformation_request when calling upsertTransformation'
            );
        }


        $resourcePath = '/transformations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upsert_transformation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upsert_transformation_request));
            } else {
                $httpBody = $upsert_transformation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
